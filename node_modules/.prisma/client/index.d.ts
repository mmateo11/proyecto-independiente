
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model jugadores
 * 
 */
export type jugadores = $Result.DefaultSelection<Prisma.$jugadoresPayload>
/**
 * Model noticias
 * 
 */
export type noticias = $Result.DefaultSelection<Prisma.$noticiasPayload>
/**
 * Model partidos
 * 
 */
export type partidos = $Result.DefaultSelection<Prisma.$partidosPayload>
/**
 * Model entradas
 * 
 */
export type entradas = $Result.DefaultSelection<Prisma.$entradasPayload>
/**
 * Model socios
 * 
 */
export type socios = $Result.DefaultSelection<Prisma.$sociosPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TipoNoticia: {
  PRINCIPAL: 'PRINCIPAL',
  SECUNDARIO: 'SECUNDARIO'
};

export type TipoNoticia = (typeof TipoNoticia)[keyof typeof TipoNoticia]


export const MetodoPago: {
  EFECTIVO: 'EFECTIVO',
  TARJETA: 'TARJETA',
  TRANSFERENCIA: 'TRANSFERENCIA'
};

export type MetodoPago = (typeof MetodoPago)[keyof typeof MetodoPago]

}

export type TipoNoticia = $Enums.TipoNoticia

export const TipoNoticia: typeof $Enums.TipoNoticia

export type MetodoPago = $Enums.MetodoPago

export const MetodoPago: typeof $Enums.MetodoPago

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Jugadores
 * const jugadores = await prisma.jugadores.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Jugadores
   * const jugadores = await prisma.jugadores.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.jugadores`: Exposes CRUD operations for the **jugadores** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jugadores
    * const jugadores = await prisma.jugadores.findMany()
    * ```
    */
  get jugadores(): Prisma.jugadoresDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.noticias`: Exposes CRUD operations for the **noticias** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Noticias
    * const noticias = await prisma.noticias.findMany()
    * ```
    */
  get noticias(): Prisma.noticiasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.partidos`: Exposes CRUD operations for the **partidos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Partidos
    * const partidos = await prisma.partidos.findMany()
    * ```
    */
  get partidos(): Prisma.partidosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.entradas`: Exposes CRUD operations for the **entradas** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entradas
    * const entradas = await prisma.entradas.findMany()
    * ```
    */
  get entradas(): Prisma.entradasDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.socios`: Exposes CRUD operations for the **socios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Socios
    * const socios = await prisma.socios.findMany()
    * ```
    */
  get socios(): Prisma.sociosDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.18.0
   * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import Bytes = runtime.Bytes
  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    jugadores: 'jugadores',
    noticias: 'noticias',
    partidos: 'partidos',
    entradas: 'entradas',
    socios: 'socios'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "jugadores" | "noticias" | "partidos" | "entradas" | "socios"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      jugadores: {
        payload: Prisma.$jugadoresPayload<ExtArgs>
        fields: Prisma.jugadoresFieldRefs
        operations: {
          findUnique: {
            args: Prisma.jugadoresFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.jugadoresFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>
          }
          findFirst: {
            args: Prisma.jugadoresFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.jugadoresFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>
          }
          findMany: {
            args: Prisma.jugadoresFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>[]
          }
          create: {
            args: Prisma.jugadoresCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>
          }
          createMany: {
            args: Prisma.jugadoresCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.jugadoresDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>
          }
          update: {
            args: Prisma.jugadoresUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>
          }
          deleteMany: {
            args: Prisma.jugadoresDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.jugadoresUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.jugadoresUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$jugadoresPayload>
          }
          aggregate: {
            args: Prisma.JugadoresAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJugadores>
          }
          groupBy: {
            args: Prisma.jugadoresGroupByArgs<ExtArgs>
            result: $Utils.Optional<JugadoresGroupByOutputType>[]
          }
          count: {
            args: Prisma.jugadoresCountArgs<ExtArgs>
            result: $Utils.Optional<JugadoresCountAggregateOutputType> | number
          }
        }
      }
      noticias: {
        payload: Prisma.$noticiasPayload<ExtArgs>
        fields: Prisma.noticiasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.noticiasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.noticiasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>
          }
          findFirst: {
            args: Prisma.noticiasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.noticiasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>
          }
          findMany: {
            args: Prisma.noticiasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>[]
          }
          create: {
            args: Prisma.noticiasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>
          }
          createMany: {
            args: Prisma.noticiasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.noticiasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>
          }
          update: {
            args: Prisma.noticiasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>
          }
          deleteMany: {
            args: Prisma.noticiasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.noticiasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.noticiasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$noticiasPayload>
          }
          aggregate: {
            args: Prisma.NoticiasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNoticias>
          }
          groupBy: {
            args: Prisma.noticiasGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoticiasGroupByOutputType>[]
          }
          count: {
            args: Prisma.noticiasCountArgs<ExtArgs>
            result: $Utils.Optional<NoticiasCountAggregateOutputType> | number
          }
        }
      }
      partidos: {
        payload: Prisma.$partidosPayload<ExtArgs>
        fields: Prisma.partidosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.partidosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.partidosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>
          }
          findFirst: {
            args: Prisma.partidosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.partidosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>
          }
          findMany: {
            args: Prisma.partidosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>[]
          }
          create: {
            args: Prisma.partidosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>
          }
          createMany: {
            args: Prisma.partidosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.partidosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>
          }
          update: {
            args: Prisma.partidosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>
          }
          deleteMany: {
            args: Prisma.partidosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.partidosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.partidosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$partidosPayload>
          }
          aggregate: {
            args: Prisma.PartidosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePartidos>
          }
          groupBy: {
            args: Prisma.partidosGroupByArgs<ExtArgs>
            result: $Utils.Optional<PartidosGroupByOutputType>[]
          }
          count: {
            args: Prisma.partidosCountArgs<ExtArgs>
            result: $Utils.Optional<PartidosCountAggregateOutputType> | number
          }
        }
      }
      entradas: {
        payload: Prisma.$entradasPayload<ExtArgs>
        fields: Prisma.entradasFieldRefs
        operations: {
          findUnique: {
            args: Prisma.entradasFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.entradasFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>
          }
          findFirst: {
            args: Prisma.entradasFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.entradasFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>
          }
          findMany: {
            args: Prisma.entradasFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>[]
          }
          create: {
            args: Prisma.entradasCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>
          }
          createMany: {
            args: Prisma.entradasCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.entradasDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>
          }
          update: {
            args: Prisma.entradasUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>
          }
          deleteMany: {
            args: Prisma.entradasDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.entradasUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.entradasUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$entradasPayload>
          }
          aggregate: {
            args: Prisma.EntradasAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEntradas>
          }
          groupBy: {
            args: Prisma.entradasGroupByArgs<ExtArgs>
            result: $Utils.Optional<EntradasGroupByOutputType>[]
          }
          count: {
            args: Prisma.entradasCountArgs<ExtArgs>
            result: $Utils.Optional<EntradasCountAggregateOutputType> | number
          }
        }
      }
      socios: {
        payload: Prisma.$sociosPayload<ExtArgs>
        fields: Prisma.sociosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sociosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sociosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>
          }
          findFirst: {
            args: Prisma.sociosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sociosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>
          }
          findMany: {
            args: Prisma.sociosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>[]
          }
          create: {
            args: Prisma.sociosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>
          }
          createMany: {
            args: Prisma.sociosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.sociosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>
          }
          update: {
            args: Prisma.sociosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>
          }
          deleteMany: {
            args: Prisma.sociosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sociosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.sociosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sociosPayload>
          }
          aggregate: {
            args: Prisma.SociosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocios>
          }
          groupBy: {
            args: Prisma.sociosGroupByArgs<ExtArgs>
            result: $Utils.Optional<SociosGroupByOutputType>[]
          }
          count: {
            args: Prisma.sociosCountArgs<ExtArgs>
            result: $Utils.Optional<SociosCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    jugadores?: jugadoresOmit
    noticias?: noticiasOmit
    partidos?: partidosOmit
    entradas?: entradasOmit
    socios?: sociosOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PartidosCountOutputType
   */

  export type PartidosCountOutputType = {
    entradas: number
  }

  export type PartidosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entradas?: boolean | PartidosCountOutputTypeCountEntradasArgs
  }

  // Custom InputTypes
  /**
   * PartidosCountOutputType without action
   */
  export type PartidosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PartidosCountOutputType
     */
    select?: PartidosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PartidosCountOutputType without action
   */
  export type PartidosCountOutputTypeCountEntradasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: entradasWhereInput
  }


  /**
   * Count Type SociosCountOutputType
   */

  export type SociosCountOutputType = {
    entradas: number
  }

  export type SociosCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entradas?: boolean | SociosCountOutputTypeCountEntradasArgs
  }

  // Custom InputTypes
  /**
   * SociosCountOutputType without action
   */
  export type SociosCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SociosCountOutputType
     */
    select?: SociosCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SociosCountOutputType without action
   */
  export type SociosCountOutputTypeCountEntradasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: entradasWhereInput
  }


  /**
   * Models
   */

  /**
   * Model jugadores
   */

  export type AggregateJugadores = {
    _count: JugadoresCountAggregateOutputType | null
    _avg: JugadoresAvgAggregateOutputType | null
    _sum: JugadoresSumAggregateOutputType | null
    _min: JugadoresMinAggregateOutputType | null
    _max: JugadoresMaxAggregateOutputType | null
  }

  export type JugadoresAvgAggregateOutputType = {
    id: number | null
    dorsal: number | null
    edad: number | null
    peso: number | null
  }

  export type JugadoresSumAggregateOutputType = {
    id: number | null
    dorsal: number | null
    edad: number | null
    peso: number | null
  }

  export type JugadoresMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    posicion: string | null
    dorsal: number | null
    url_imagen: string | null
    edad: number | null
    nacionalidad: string | null
    peso: number | null
    lugar_nacimiento: string | null
  }

  export type JugadoresMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    posicion: string | null
    dorsal: number | null
    url_imagen: string | null
    edad: number | null
    nacionalidad: string | null
    peso: number | null
    lugar_nacimiento: string | null
  }

  export type JugadoresCountAggregateOutputType = {
    id: number
    nombre: number
    posicion: number
    dorsal: number
    url_imagen: number
    edad: number
    nacionalidad: number
    peso: number
    lugar_nacimiento: number
    _all: number
  }


  export type JugadoresAvgAggregateInputType = {
    id?: true
    dorsal?: true
    edad?: true
    peso?: true
  }

  export type JugadoresSumAggregateInputType = {
    id?: true
    dorsal?: true
    edad?: true
    peso?: true
  }

  export type JugadoresMinAggregateInputType = {
    id?: true
    nombre?: true
    posicion?: true
    dorsal?: true
    url_imagen?: true
    edad?: true
    nacionalidad?: true
    peso?: true
    lugar_nacimiento?: true
  }

  export type JugadoresMaxAggregateInputType = {
    id?: true
    nombre?: true
    posicion?: true
    dorsal?: true
    url_imagen?: true
    edad?: true
    nacionalidad?: true
    peso?: true
    lugar_nacimiento?: true
  }

  export type JugadoresCountAggregateInputType = {
    id?: true
    nombre?: true
    posicion?: true
    dorsal?: true
    url_imagen?: true
    edad?: true
    nacionalidad?: true
    peso?: true
    lugar_nacimiento?: true
    _all?: true
  }

  export type JugadoresAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jugadores to aggregate.
     */
    where?: jugadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jugadores to fetch.
     */
    orderBy?: jugadoresOrderByWithRelationInput | jugadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: jugadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jugadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jugadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jugadores
    **/
    _count?: true | JugadoresCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JugadoresAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JugadoresSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JugadoresMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JugadoresMaxAggregateInputType
  }

  export type GetJugadoresAggregateType<T extends JugadoresAggregateArgs> = {
        [P in keyof T & keyof AggregateJugadores]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJugadores[P]>
      : GetScalarType<T[P], AggregateJugadores[P]>
  }




  export type jugadoresGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: jugadoresWhereInput
    orderBy?: jugadoresOrderByWithAggregationInput | jugadoresOrderByWithAggregationInput[]
    by: JugadoresScalarFieldEnum[] | JugadoresScalarFieldEnum
    having?: jugadoresScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JugadoresCountAggregateInputType | true
    _avg?: JugadoresAvgAggregateInputType
    _sum?: JugadoresSumAggregateInputType
    _min?: JugadoresMinAggregateInputType
    _max?: JugadoresMaxAggregateInputType
  }

  export type JugadoresGroupByOutputType = {
    id: number
    nombre: string
    posicion: string
    dorsal: number
    url_imagen: string
    edad: number | null
    nacionalidad: string | null
    peso: number | null
    lugar_nacimiento: string | null
    _count: JugadoresCountAggregateOutputType | null
    _avg: JugadoresAvgAggregateOutputType | null
    _sum: JugadoresSumAggregateOutputType | null
    _min: JugadoresMinAggregateOutputType | null
    _max: JugadoresMaxAggregateOutputType | null
  }

  type GetJugadoresGroupByPayload<T extends jugadoresGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JugadoresGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JugadoresGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JugadoresGroupByOutputType[P]>
            : GetScalarType<T[P], JugadoresGroupByOutputType[P]>
        }
      >
    >


  export type jugadoresSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    posicion?: boolean
    dorsal?: boolean
    url_imagen?: boolean
    edad?: boolean
    nacionalidad?: boolean
    peso?: boolean
    lugar_nacimiento?: boolean
  }, ExtArgs["result"]["jugadores"]>



  export type jugadoresSelectScalar = {
    id?: boolean
    nombre?: boolean
    posicion?: boolean
    dorsal?: boolean
    url_imagen?: boolean
    edad?: boolean
    nacionalidad?: boolean
    peso?: boolean
    lugar_nacimiento?: boolean
  }

  export type jugadoresOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "posicion" | "dorsal" | "url_imagen" | "edad" | "nacionalidad" | "peso" | "lugar_nacimiento", ExtArgs["result"]["jugadores"]>

  export type $jugadoresPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "jugadores"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      posicion: string
      dorsal: number
      url_imagen: string
      edad: number | null
      nacionalidad: string | null
      peso: number | null
      lugar_nacimiento: string | null
    }, ExtArgs["result"]["jugadores"]>
    composites: {}
  }

  type jugadoresGetPayload<S extends boolean | null | undefined | jugadoresDefaultArgs> = $Result.GetResult<Prisma.$jugadoresPayload, S>

  type jugadoresCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<jugadoresFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JugadoresCountAggregateInputType | true
    }

  export interface jugadoresDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['jugadores'], meta: { name: 'jugadores' } }
    /**
     * Find zero or one Jugadores that matches the filter.
     * @param {jugadoresFindUniqueArgs} args - Arguments to find a Jugadores
     * @example
     * // Get one Jugadores
     * const jugadores = await prisma.jugadores.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends jugadoresFindUniqueArgs>(args: SelectSubset<T, jugadoresFindUniqueArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Jugadores that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {jugadoresFindUniqueOrThrowArgs} args - Arguments to find a Jugadores
     * @example
     * // Get one Jugadores
     * const jugadores = await prisma.jugadores.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends jugadoresFindUniqueOrThrowArgs>(args: SelectSubset<T, jugadoresFindUniqueOrThrowArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jugadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jugadoresFindFirstArgs} args - Arguments to find a Jugadores
     * @example
     * // Get one Jugadores
     * const jugadores = await prisma.jugadores.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends jugadoresFindFirstArgs>(args?: SelectSubset<T, jugadoresFindFirstArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Jugadores that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jugadoresFindFirstOrThrowArgs} args - Arguments to find a Jugadores
     * @example
     * // Get one Jugadores
     * const jugadores = await prisma.jugadores.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends jugadoresFindFirstOrThrowArgs>(args?: SelectSubset<T, jugadoresFindFirstOrThrowArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Jugadores that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jugadoresFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jugadores
     * const jugadores = await prisma.jugadores.findMany()
     * 
     * // Get first 10 Jugadores
     * const jugadores = await prisma.jugadores.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jugadoresWithIdOnly = await prisma.jugadores.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends jugadoresFindManyArgs>(args?: SelectSubset<T, jugadoresFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Jugadores.
     * @param {jugadoresCreateArgs} args - Arguments to create a Jugadores.
     * @example
     * // Create one Jugadores
     * const Jugadores = await prisma.jugadores.create({
     *   data: {
     *     // ... data to create a Jugadores
     *   }
     * })
     * 
     */
    create<T extends jugadoresCreateArgs>(args: SelectSubset<T, jugadoresCreateArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Jugadores.
     * @param {jugadoresCreateManyArgs} args - Arguments to create many Jugadores.
     * @example
     * // Create many Jugadores
     * const jugadores = await prisma.jugadores.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends jugadoresCreateManyArgs>(args?: SelectSubset<T, jugadoresCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jugadores.
     * @param {jugadoresDeleteArgs} args - Arguments to delete one Jugadores.
     * @example
     * // Delete one Jugadores
     * const Jugadores = await prisma.jugadores.delete({
     *   where: {
     *     // ... filter to delete one Jugadores
     *   }
     * })
     * 
     */
    delete<T extends jugadoresDeleteArgs>(args: SelectSubset<T, jugadoresDeleteArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Jugadores.
     * @param {jugadoresUpdateArgs} args - Arguments to update one Jugadores.
     * @example
     * // Update one Jugadores
     * const jugadores = await prisma.jugadores.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends jugadoresUpdateArgs>(args: SelectSubset<T, jugadoresUpdateArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Jugadores.
     * @param {jugadoresDeleteManyArgs} args - Arguments to filter Jugadores to delete.
     * @example
     * // Delete a few Jugadores
     * const { count } = await prisma.jugadores.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends jugadoresDeleteManyArgs>(args?: SelectSubset<T, jugadoresDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jugadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jugadoresUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jugadores
     * const jugadores = await prisma.jugadores.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends jugadoresUpdateManyArgs>(args: SelectSubset<T, jugadoresUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jugadores.
     * @param {jugadoresUpsertArgs} args - Arguments to update or create a Jugadores.
     * @example
     * // Update or create a Jugadores
     * const jugadores = await prisma.jugadores.upsert({
     *   create: {
     *     // ... data to create a Jugadores
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jugadores we want to update
     *   }
     * })
     */
    upsert<T extends jugadoresUpsertArgs>(args: SelectSubset<T, jugadoresUpsertArgs<ExtArgs>>): Prisma__jugadoresClient<$Result.GetResult<Prisma.$jugadoresPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Jugadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jugadoresCountArgs} args - Arguments to filter Jugadores to count.
     * @example
     * // Count the number of Jugadores
     * const count = await prisma.jugadores.count({
     *   where: {
     *     // ... the filter for the Jugadores we want to count
     *   }
     * })
    **/
    count<T extends jugadoresCountArgs>(
      args?: Subset<T, jugadoresCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JugadoresCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jugadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JugadoresAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JugadoresAggregateArgs>(args: Subset<T, JugadoresAggregateArgs>): Prisma.PrismaPromise<GetJugadoresAggregateType<T>>

    /**
     * Group by Jugadores.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jugadoresGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends jugadoresGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: jugadoresGroupByArgs['orderBy'] }
        : { orderBy?: jugadoresGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, jugadoresGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJugadoresGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the jugadores model
   */
  readonly fields: jugadoresFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for jugadores.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__jugadoresClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the jugadores model
   */
  interface jugadoresFieldRefs {
    readonly id: FieldRef<"jugadores", 'Int'>
    readonly nombre: FieldRef<"jugadores", 'String'>
    readonly posicion: FieldRef<"jugadores", 'String'>
    readonly dorsal: FieldRef<"jugadores", 'Int'>
    readonly url_imagen: FieldRef<"jugadores", 'String'>
    readonly edad: FieldRef<"jugadores", 'Int'>
    readonly nacionalidad: FieldRef<"jugadores", 'String'>
    readonly peso: FieldRef<"jugadores", 'Float'>
    readonly lugar_nacimiento: FieldRef<"jugadores", 'String'>
  }
    

  // Custom InputTypes
  /**
   * jugadores findUnique
   */
  export type jugadoresFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * Filter, which jugadores to fetch.
     */
    where: jugadoresWhereUniqueInput
  }

  /**
   * jugadores findUniqueOrThrow
   */
  export type jugadoresFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * Filter, which jugadores to fetch.
     */
    where: jugadoresWhereUniqueInput
  }

  /**
   * jugadores findFirst
   */
  export type jugadoresFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * Filter, which jugadores to fetch.
     */
    where?: jugadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jugadores to fetch.
     */
    orderBy?: jugadoresOrderByWithRelationInput | jugadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jugadores.
     */
    cursor?: jugadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jugadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jugadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jugadores.
     */
    distinct?: JugadoresScalarFieldEnum | JugadoresScalarFieldEnum[]
  }

  /**
   * jugadores findFirstOrThrow
   */
  export type jugadoresFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * Filter, which jugadores to fetch.
     */
    where?: jugadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jugadores to fetch.
     */
    orderBy?: jugadoresOrderByWithRelationInput | jugadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jugadores.
     */
    cursor?: jugadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jugadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jugadores.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jugadores.
     */
    distinct?: JugadoresScalarFieldEnum | JugadoresScalarFieldEnum[]
  }

  /**
   * jugadores findMany
   */
  export type jugadoresFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * Filter, which jugadores to fetch.
     */
    where?: jugadoresWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jugadores to fetch.
     */
    orderBy?: jugadoresOrderByWithRelationInput | jugadoresOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jugadores.
     */
    cursor?: jugadoresWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jugadores from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jugadores.
     */
    skip?: number
    distinct?: JugadoresScalarFieldEnum | JugadoresScalarFieldEnum[]
  }

  /**
   * jugadores create
   */
  export type jugadoresCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * The data needed to create a jugadores.
     */
    data: XOR<jugadoresCreateInput, jugadoresUncheckedCreateInput>
  }

  /**
   * jugadores createMany
   */
  export type jugadoresCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many jugadores.
     */
    data: jugadoresCreateManyInput | jugadoresCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * jugadores update
   */
  export type jugadoresUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * The data needed to update a jugadores.
     */
    data: XOR<jugadoresUpdateInput, jugadoresUncheckedUpdateInput>
    /**
     * Choose, which jugadores to update.
     */
    where: jugadoresWhereUniqueInput
  }

  /**
   * jugadores updateMany
   */
  export type jugadoresUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update jugadores.
     */
    data: XOR<jugadoresUpdateManyMutationInput, jugadoresUncheckedUpdateManyInput>
    /**
     * Filter which jugadores to update
     */
    where?: jugadoresWhereInput
    /**
     * Limit how many jugadores to update.
     */
    limit?: number
  }

  /**
   * jugadores upsert
   */
  export type jugadoresUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * The filter to search for the jugadores to update in case it exists.
     */
    where: jugadoresWhereUniqueInput
    /**
     * In case the jugadores found by the `where` argument doesn't exist, create a new jugadores with this data.
     */
    create: XOR<jugadoresCreateInput, jugadoresUncheckedCreateInput>
    /**
     * In case the jugadores was found with the provided `where` argument, update it with this data.
     */
    update: XOR<jugadoresUpdateInput, jugadoresUncheckedUpdateInput>
  }

  /**
   * jugadores delete
   */
  export type jugadoresDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
    /**
     * Filter which jugadores to delete.
     */
    where: jugadoresWhereUniqueInput
  }

  /**
   * jugadores deleteMany
   */
  export type jugadoresDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which jugadores to delete
     */
    where?: jugadoresWhereInput
    /**
     * Limit how many jugadores to delete.
     */
    limit?: number
  }

  /**
   * jugadores without action
   */
  export type jugadoresDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the jugadores
     */
    select?: jugadoresSelect<ExtArgs> | null
    /**
     * Omit specific fields from the jugadores
     */
    omit?: jugadoresOmit<ExtArgs> | null
  }


  /**
   * Model noticias
   */

  export type AggregateNoticias = {
    _count: NoticiasCountAggregateOutputType | null
    _avg: NoticiasAvgAggregateOutputType | null
    _sum: NoticiasSumAggregateOutputType | null
    _min: NoticiasMinAggregateOutputType | null
    _max: NoticiasMaxAggregateOutputType | null
  }

  export type NoticiasAvgAggregateOutputType = {
    id: number | null
  }

  export type NoticiasSumAggregateOutputType = {
    id: number | null
  }

  export type NoticiasMinAggregateOutputType = {
    id: number | null
    titulo: string | null
    tipo: $Enums.TipoNoticia | null
    resumen: string | null
    descripcion: string | null
    fecha: Date | null
    url_imagen: string | null
  }

  export type NoticiasMaxAggregateOutputType = {
    id: number | null
    titulo: string | null
    tipo: $Enums.TipoNoticia | null
    resumen: string | null
    descripcion: string | null
    fecha: Date | null
    url_imagen: string | null
  }

  export type NoticiasCountAggregateOutputType = {
    id: number
    titulo: number
    tipo: number
    resumen: number
    descripcion: number
    fecha: number
    url_imagen: number
    _all: number
  }


  export type NoticiasAvgAggregateInputType = {
    id?: true
  }

  export type NoticiasSumAggregateInputType = {
    id?: true
  }

  export type NoticiasMinAggregateInputType = {
    id?: true
    titulo?: true
    tipo?: true
    resumen?: true
    descripcion?: true
    fecha?: true
    url_imagen?: true
  }

  export type NoticiasMaxAggregateInputType = {
    id?: true
    titulo?: true
    tipo?: true
    resumen?: true
    descripcion?: true
    fecha?: true
    url_imagen?: true
  }

  export type NoticiasCountAggregateInputType = {
    id?: true
    titulo?: true
    tipo?: true
    resumen?: true
    descripcion?: true
    fecha?: true
    url_imagen?: true
    _all?: true
  }

  export type NoticiasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which noticias to aggregate.
     */
    where?: noticiasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of noticias to fetch.
     */
    orderBy?: noticiasOrderByWithRelationInput | noticiasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: noticiasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned noticias
    **/
    _count?: true | NoticiasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NoticiasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NoticiasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoticiasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoticiasMaxAggregateInputType
  }

  export type GetNoticiasAggregateType<T extends NoticiasAggregateArgs> = {
        [P in keyof T & keyof AggregateNoticias]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNoticias[P]>
      : GetScalarType<T[P], AggregateNoticias[P]>
  }




  export type noticiasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: noticiasWhereInput
    orderBy?: noticiasOrderByWithAggregationInput | noticiasOrderByWithAggregationInput[]
    by: NoticiasScalarFieldEnum[] | NoticiasScalarFieldEnum
    having?: noticiasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoticiasCountAggregateInputType | true
    _avg?: NoticiasAvgAggregateInputType
    _sum?: NoticiasSumAggregateInputType
    _min?: NoticiasMinAggregateInputType
    _max?: NoticiasMaxAggregateInputType
  }

  export type NoticiasGroupByOutputType = {
    id: number
    titulo: string
    tipo: $Enums.TipoNoticia
    resumen: string | null
    descripcion: string
    fecha: Date
    url_imagen: string
    _count: NoticiasCountAggregateOutputType | null
    _avg: NoticiasAvgAggregateOutputType | null
    _sum: NoticiasSumAggregateOutputType | null
    _min: NoticiasMinAggregateOutputType | null
    _max: NoticiasMaxAggregateOutputType | null
  }

  type GetNoticiasGroupByPayload<T extends noticiasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoticiasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoticiasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoticiasGroupByOutputType[P]>
            : GetScalarType<T[P], NoticiasGroupByOutputType[P]>
        }
      >
    >


  export type noticiasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    tipo?: boolean
    resumen?: boolean
    descripcion?: boolean
    fecha?: boolean
    url_imagen?: boolean
  }, ExtArgs["result"]["noticias"]>



  export type noticiasSelectScalar = {
    id?: boolean
    titulo?: boolean
    tipo?: boolean
    resumen?: boolean
    descripcion?: boolean
    fecha?: boolean
    url_imagen?: boolean
  }

  export type noticiasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "titulo" | "tipo" | "resumen" | "descripcion" | "fecha" | "url_imagen", ExtArgs["result"]["noticias"]>

  export type $noticiasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "noticias"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      titulo: string
      tipo: $Enums.TipoNoticia
      resumen: string | null
      descripcion: string
      fecha: Date
      url_imagen: string
    }, ExtArgs["result"]["noticias"]>
    composites: {}
  }

  type noticiasGetPayload<S extends boolean | null | undefined | noticiasDefaultArgs> = $Result.GetResult<Prisma.$noticiasPayload, S>

  type noticiasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<noticiasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoticiasCountAggregateInputType | true
    }

  export interface noticiasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['noticias'], meta: { name: 'noticias' } }
    /**
     * Find zero or one Noticias that matches the filter.
     * @param {noticiasFindUniqueArgs} args - Arguments to find a Noticias
     * @example
     * // Get one Noticias
     * const noticias = await prisma.noticias.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends noticiasFindUniqueArgs>(args: SelectSubset<T, noticiasFindUniqueArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Noticias that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {noticiasFindUniqueOrThrowArgs} args - Arguments to find a Noticias
     * @example
     * // Get one Noticias
     * const noticias = await prisma.noticias.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends noticiasFindUniqueOrThrowArgs>(args: SelectSubset<T, noticiasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Noticias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {noticiasFindFirstArgs} args - Arguments to find a Noticias
     * @example
     * // Get one Noticias
     * const noticias = await prisma.noticias.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends noticiasFindFirstArgs>(args?: SelectSubset<T, noticiasFindFirstArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Noticias that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {noticiasFindFirstOrThrowArgs} args - Arguments to find a Noticias
     * @example
     * // Get one Noticias
     * const noticias = await prisma.noticias.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends noticiasFindFirstOrThrowArgs>(args?: SelectSubset<T, noticiasFindFirstOrThrowArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Noticias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {noticiasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Noticias
     * const noticias = await prisma.noticias.findMany()
     * 
     * // Get first 10 Noticias
     * const noticias = await prisma.noticias.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noticiasWithIdOnly = await prisma.noticias.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends noticiasFindManyArgs>(args?: SelectSubset<T, noticiasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Noticias.
     * @param {noticiasCreateArgs} args - Arguments to create a Noticias.
     * @example
     * // Create one Noticias
     * const Noticias = await prisma.noticias.create({
     *   data: {
     *     // ... data to create a Noticias
     *   }
     * })
     * 
     */
    create<T extends noticiasCreateArgs>(args: SelectSubset<T, noticiasCreateArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Noticias.
     * @param {noticiasCreateManyArgs} args - Arguments to create many Noticias.
     * @example
     * // Create many Noticias
     * const noticias = await prisma.noticias.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends noticiasCreateManyArgs>(args?: SelectSubset<T, noticiasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Noticias.
     * @param {noticiasDeleteArgs} args - Arguments to delete one Noticias.
     * @example
     * // Delete one Noticias
     * const Noticias = await prisma.noticias.delete({
     *   where: {
     *     // ... filter to delete one Noticias
     *   }
     * })
     * 
     */
    delete<T extends noticiasDeleteArgs>(args: SelectSubset<T, noticiasDeleteArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Noticias.
     * @param {noticiasUpdateArgs} args - Arguments to update one Noticias.
     * @example
     * // Update one Noticias
     * const noticias = await prisma.noticias.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends noticiasUpdateArgs>(args: SelectSubset<T, noticiasUpdateArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Noticias.
     * @param {noticiasDeleteManyArgs} args - Arguments to filter Noticias to delete.
     * @example
     * // Delete a few Noticias
     * const { count } = await prisma.noticias.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends noticiasDeleteManyArgs>(args?: SelectSubset<T, noticiasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {noticiasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Noticias
     * const noticias = await prisma.noticias.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends noticiasUpdateManyArgs>(args: SelectSubset<T, noticiasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Noticias.
     * @param {noticiasUpsertArgs} args - Arguments to update or create a Noticias.
     * @example
     * // Update or create a Noticias
     * const noticias = await prisma.noticias.upsert({
     *   create: {
     *     // ... data to create a Noticias
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Noticias we want to update
     *   }
     * })
     */
    upsert<T extends noticiasUpsertArgs>(args: SelectSubset<T, noticiasUpsertArgs<ExtArgs>>): Prisma__noticiasClient<$Result.GetResult<Prisma.$noticiasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {noticiasCountArgs} args - Arguments to filter Noticias to count.
     * @example
     * // Count the number of Noticias
     * const count = await prisma.noticias.count({
     *   where: {
     *     // ... the filter for the Noticias we want to count
     *   }
     * })
    **/
    count<T extends noticiasCountArgs>(
      args?: Subset<T, noticiasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoticiasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoticiasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoticiasAggregateArgs>(args: Subset<T, NoticiasAggregateArgs>): Prisma.PrismaPromise<GetNoticiasAggregateType<T>>

    /**
     * Group by Noticias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {noticiasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends noticiasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: noticiasGroupByArgs['orderBy'] }
        : { orderBy?: noticiasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, noticiasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoticiasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the noticias model
   */
  readonly fields: noticiasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for noticias.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__noticiasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the noticias model
   */
  interface noticiasFieldRefs {
    readonly id: FieldRef<"noticias", 'Int'>
    readonly titulo: FieldRef<"noticias", 'String'>
    readonly tipo: FieldRef<"noticias", 'TipoNoticia'>
    readonly resumen: FieldRef<"noticias", 'String'>
    readonly descripcion: FieldRef<"noticias", 'String'>
    readonly fecha: FieldRef<"noticias", 'DateTime'>
    readonly url_imagen: FieldRef<"noticias", 'String'>
  }
    

  // Custom InputTypes
  /**
   * noticias findUnique
   */
  export type noticiasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * Filter, which noticias to fetch.
     */
    where: noticiasWhereUniqueInput
  }

  /**
   * noticias findUniqueOrThrow
   */
  export type noticiasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * Filter, which noticias to fetch.
     */
    where: noticiasWhereUniqueInput
  }

  /**
   * noticias findFirst
   */
  export type noticiasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * Filter, which noticias to fetch.
     */
    where?: noticiasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of noticias to fetch.
     */
    orderBy?: noticiasOrderByWithRelationInput | noticiasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for noticias.
     */
    cursor?: noticiasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of noticias.
     */
    distinct?: NoticiasScalarFieldEnum | NoticiasScalarFieldEnum[]
  }

  /**
   * noticias findFirstOrThrow
   */
  export type noticiasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * Filter, which noticias to fetch.
     */
    where?: noticiasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of noticias to fetch.
     */
    orderBy?: noticiasOrderByWithRelationInput | noticiasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for noticias.
     */
    cursor?: noticiasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` noticias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of noticias.
     */
    distinct?: NoticiasScalarFieldEnum | NoticiasScalarFieldEnum[]
  }

  /**
   * noticias findMany
   */
  export type noticiasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * Filter, which noticias to fetch.
     */
    where?: noticiasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of noticias to fetch.
     */
    orderBy?: noticiasOrderByWithRelationInput | noticiasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing noticias.
     */
    cursor?: noticiasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` noticias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` noticias.
     */
    skip?: number
    distinct?: NoticiasScalarFieldEnum | NoticiasScalarFieldEnum[]
  }

  /**
   * noticias create
   */
  export type noticiasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * The data needed to create a noticias.
     */
    data: XOR<noticiasCreateInput, noticiasUncheckedCreateInput>
  }

  /**
   * noticias createMany
   */
  export type noticiasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many noticias.
     */
    data: noticiasCreateManyInput | noticiasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * noticias update
   */
  export type noticiasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * The data needed to update a noticias.
     */
    data: XOR<noticiasUpdateInput, noticiasUncheckedUpdateInput>
    /**
     * Choose, which noticias to update.
     */
    where: noticiasWhereUniqueInput
  }

  /**
   * noticias updateMany
   */
  export type noticiasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update noticias.
     */
    data: XOR<noticiasUpdateManyMutationInput, noticiasUncheckedUpdateManyInput>
    /**
     * Filter which noticias to update
     */
    where?: noticiasWhereInput
    /**
     * Limit how many noticias to update.
     */
    limit?: number
  }

  /**
   * noticias upsert
   */
  export type noticiasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * The filter to search for the noticias to update in case it exists.
     */
    where: noticiasWhereUniqueInput
    /**
     * In case the noticias found by the `where` argument doesn't exist, create a new noticias with this data.
     */
    create: XOR<noticiasCreateInput, noticiasUncheckedCreateInput>
    /**
     * In case the noticias was found with the provided `where` argument, update it with this data.
     */
    update: XOR<noticiasUpdateInput, noticiasUncheckedUpdateInput>
  }

  /**
   * noticias delete
   */
  export type noticiasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
    /**
     * Filter which noticias to delete.
     */
    where: noticiasWhereUniqueInput
  }

  /**
   * noticias deleteMany
   */
  export type noticiasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which noticias to delete
     */
    where?: noticiasWhereInput
    /**
     * Limit how many noticias to delete.
     */
    limit?: number
  }

  /**
   * noticias without action
   */
  export type noticiasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the noticias
     */
    select?: noticiasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the noticias
     */
    omit?: noticiasOmit<ExtArgs> | null
  }


  /**
   * Model partidos
   */

  export type AggregatePartidos = {
    _count: PartidosCountAggregateOutputType | null
    _avg: PartidosAvgAggregateOutputType | null
    _sum: PartidosSumAggregateOutputType | null
    _min: PartidosMinAggregateOutputType | null
    _max: PartidosMaxAggregateOutputType | null
  }

  export type PartidosAvgAggregateOutputType = {
    id: number | null
  }

  export type PartidosSumAggregateOutputType = {
    id: number | null
  }

  export type PartidosMinAggregateOutputType = {
    id: number | null
    fecha: Date | null
    rival: string | null
    resultado: string | null
  }

  export type PartidosMaxAggregateOutputType = {
    id: number | null
    fecha: Date | null
    rival: string | null
    resultado: string | null
  }

  export type PartidosCountAggregateOutputType = {
    id: number
    fecha: number
    rival: number
    resultado: number
    _all: number
  }


  export type PartidosAvgAggregateInputType = {
    id?: true
  }

  export type PartidosSumAggregateInputType = {
    id?: true
  }

  export type PartidosMinAggregateInputType = {
    id?: true
    fecha?: true
    rival?: true
    resultado?: true
  }

  export type PartidosMaxAggregateInputType = {
    id?: true
    fecha?: true
    rival?: true
    resultado?: true
  }

  export type PartidosCountAggregateInputType = {
    id?: true
    fecha?: true
    rival?: true
    resultado?: true
    _all?: true
  }

  export type PartidosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which partidos to aggregate.
     */
    where?: partidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidosOrderByWithRelationInput | partidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: partidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned partidos
    **/
    _count?: true | PartidosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PartidosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PartidosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PartidosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PartidosMaxAggregateInputType
  }

  export type GetPartidosAggregateType<T extends PartidosAggregateArgs> = {
        [P in keyof T & keyof AggregatePartidos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePartidos[P]>
      : GetScalarType<T[P], AggregatePartidos[P]>
  }




  export type partidosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: partidosWhereInput
    orderBy?: partidosOrderByWithAggregationInput | partidosOrderByWithAggregationInput[]
    by: PartidosScalarFieldEnum[] | PartidosScalarFieldEnum
    having?: partidosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PartidosCountAggregateInputType | true
    _avg?: PartidosAvgAggregateInputType
    _sum?: PartidosSumAggregateInputType
    _min?: PartidosMinAggregateInputType
    _max?: PartidosMaxAggregateInputType
  }

  export type PartidosGroupByOutputType = {
    id: number
    fecha: Date
    rival: string
    resultado: string | null
    _count: PartidosCountAggregateOutputType | null
    _avg: PartidosAvgAggregateOutputType | null
    _sum: PartidosSumAggregateOutputType | null
    _min: PartidosMinAggregateOutputType | null
    _max: PartidosMaxAggregateOutputType | null
  }

  type GetPartidosGroupByPayload<T extends partidosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PartidosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PartidosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PartidosGroupByOutputType[P]>
            : GetScalarType<T[P], PartidosGroupByOutputType[P]>
        }
      >
    >


  export type partidosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fecha?: boolean
    rival?: boolean
    resultado?: boolean
    entradas?: boolean | partidos$entradasArgs<ExtArgs>
    _count?: boolean | PartidosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["partidos"]>



  export type partidosSelectScalar = {
    id?: boolean
    fecha?: boolean
    rival?: boolean
    resultado?: boolean
  }

  export type partidosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fecha" | "rival" | "resultado", ExtArgs["result"]["partidos"]>
  export type partidosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entradas?: boolean | partidos$entradasArgs<ExtArgs>
    _count?: boolean | PartidosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $partidosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "partidos"
    objects: {
      entradas: Prisma.$entradasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fecha: Date
      rival: string
      resultado: string | null
    }, ExtArgs["result"]["partidos"]>
    composites: {}
  }

  type partidosGetPayload<S extends boolean | null | undefined | partidosDefaultArgs> = $Result.GetResult<Prisma.$partidosPayload, S>

  type partidosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<partidosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PartidosCountAggregateInputType | true
    }

  export interface partidosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['partidos'], meta: { name: 'partidos' } }
    /**
     * Find zero or one Partidos that matches the filter.
     * @param {partidosFindUniqueArgs} args - Arguments to find a Partidos
     * @example
     * // Get one Partidos
     * const partidos = await prisma.partidos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends partidosFindUniqueArgs>(args: SelectSubset<T, partidosFindUniqueArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Partidos that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {partidosFindUniqueOrThrowArgs} args - Arguments to find a Partidos
     * @example
     * // Get one Partidos
     * const partidos = await prisma.partidos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends partidosFindUniqueOrThrowArgs>(args: SelectSubset<T, partidosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidosFindFirstArgs} args - Arguments to find a Partidos
     * @example
     * // Get one Partidos
     * const partidos = await prisma.partidos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends partidosFindFirstArgs>(args?: SelectSubset<T, partidosFindFirstArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Partidos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidosFindFirstOrThrowArgs} args - Arguments to find a Partidos
     * @example
     * // Get one Partidos
     * const partidos = await prisma.partidos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends partidosFindFirstOrThrowArgs>(args?: SelectSubset<T, partidosFindFirstOrThrowArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Partidos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Partidos
     * const partidos = await prisma.partidos.findMany()
     * 
     * // Get first 10 Partidos
     * const partidos = await prisma.partidos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const partidosWithIdOnly = await prisma.partidos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends partidosFindManyArgs>(args?: SelectSubset<T, partidosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Partidos.
     * @param {partidosCreateArgs} args - Arguments to create a Partidos.
     * @example
     * // Create one Partidos
     * const Partidos = await prisma.partidos.create({
     *   data: {
     *     // ... data to create a Partidos
     *   }
     * })
     * 
     */
    create<T extends partidosCreateArgs>(args: SelectSubset<T, partidosCreateArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Partidos.
     * @param {partidosCreateManyArgs} args - Arguments to create many Partidos.
     * @example
     * // Create many Partidos
     * const partidos = await prisma.partidos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends partidosCreateManyArgs>(args?: SelectSubset<T, partidosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Partidos.
     * @param {partidosDeleteArgs} args - Arguments to delete one Partidos.
     * @example
     * // Delete one Partidos
     * const Partidos = await prisma.partidos.delete({
     *   where: {
     *     // ... filter to delete one Partidos
     *   }
     * })
     * 
     */
    delete<T extends partidosDeleteArgs>(args: SelectSubset<T, partidosDeleteArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Partidos.
     * @param {partidosUpdateArgs} args - Arguments to update one Partidos.
     * @example
     * // Update one Partidos
     * const partidos = await prisma.partidos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends partidosUpdateArgs>(args: SelectSubset<T, partidosUpdateArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Partidos.
     * @param {partidosDeleteManyArgs} args - Arguments to filter Partidos to delete.
     * @example
     * // Delete a few Partidos
     * const { count } = await prisma.partidos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends partidosDeleteManyArgs>(args?: SelectSubset<T, partidosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Partidos
     * const partidos = await prisma.partidos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends partidosUpdateManyArgs>(args: SelectSubset<T, partidosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Partidos.
     * @param {partidosUpsertArgs} args - Arguments to update or create a Partidos.
     * @example
     * // Update or create a Partidos
     * const partidos = await prisma.partidos.upsert({
     *   create: {
     *     // ... data to create a Partidos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Partidos we want to update
     *   }
     * })
     */
    upsert<T extends partidosUpsertArgs>(args: SelectSubset<T, partidosUpsertArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidosCountArgs} args - Arguments to filter Partidos to count.
     * @example
     * // Count the number of Partidos
     * const count = await prisma.partidos.count({
     *   where: {
     *     // ... the filter for the Partidos we want to count
     *   }
     * })
    **/
    count<T extends partidosCountArgs>(
      args?: Subset<T, partidosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PartidosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PartidosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PartidosAggregateArgs>(args: Subset<T, PartidosAggregateArgs>): Prisma.PrismaPromise<GetPartidosAggregateType<T>>

    /**
     * Group by Partidos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {partidosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends partidosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: partidosGroupByArgs['orderBy'] }
        : { orderBy?: partidosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, partidosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPartidosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the partidos model
   */
  readonly fields: partidosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for partidos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__partidosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entradas<T extends partidos$entradasArgs<ExtArgs> = {}>(args?: Subset<T, partidos$entradasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the partidos model
   */
  interface partidosFieldRefs {
    readonly id: FieldRef<"partidos", 'Int'>
    readonly fecha: FieldRef<"partidos", 'DateTime'>
    readonly rival: FieldRef<"partidos", 'String'>
    readonly resultado: FieldRef<"partidos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * partidos findUnique
   */
  export type partidosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * Filter, which partidos to fetch.
     */
    where: partidosWhereUniqueInput
  }

  /**
   * partidos findUniqueOrThrow
   */
  export type partidosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * Filter, which partidos to fetch.
     */
    where: partidosWhereUniqueInput
  }

  /**
   * partidos findFirst
   */
  export type partidosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * Filter, which partidos to fetch.
     */
    where?: partidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidosOrderByWithRelationInput | partidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partidos.
     */
    cursor?: partidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of partidos.
     */
    distinct?: PartidosScalarFieldEnum | PartidosScalarFieldEnum[]
  }

  /**
   * partidos findFirstOrThrow
   */
  export type partidosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * Filter, which partidos to fetch.
     */
    where?: partidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidosOrderByWithRelationInput | partidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for partidos.
     */
    cursor?: partidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of partidos.
     */
    distinct?: PartidosScalarFieldEnum | PartidosScalarFieldEnum[]
  }

  /**
   * partidos findMany
   */
  export type partidosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * Filter, which partidos to fetch.
     */
    where?: partidosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of partidos to fetch.
     */
    orderBy?: partidosOrderByWithRelationInput | partidosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing partidos.
     */
    cursor?: partidosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` partidos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` partidos.
     */
    skip?: number
    distinct?: PartidosScalarFieldEnum | PartidosScalarFieldEnum[]
  }

  /**
   * partidos create
   */
  export type partidosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * The data needed to create a partidos.
     */
    data: XOR<partidosCreateInput, partidosUncheckedCreateInput>
  }

  /**
   * partidos createMany
   */
  export type partidosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many partidos.
     */
    data: partidosCreateManyInput | partidosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * partidos update
   */
  export type partidosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * The data needed to update a partidos.
     */
    data: XOR<partidosUpdateInput, partidosUncheckedUpdateInput>
    /**
     * Choose, which partidos to update.
     */
    where: partidosWhereUniqueInput
  }

  /**
   * partidos updateMany
   */
  export type partidosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update partidos.
     */
    data: XOR<partidosUpdateManyMutationInput, partidosUncheckedUpdateManyInput>
    /**
     * Filter which partidos to update
     */
    where?: partidosWhereInput
    /**
     * Limit how many partidos to update.
     */
    limit?: number
  }

  /**
   * partidos upsert
   */
  export type partidosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * The filter to search for the partidos to update in case it exists.
     */
    where: partidosWhereUniqueInput
    /**
     * In case the partidos found by the `where` argument doesn't exist, create a new partidos with this data.
     */
    create: XOR<partidosCreateInput, partidosUncheckedCreateInput>
    /**
     * In case the partidos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<partidosUpdateInput, partidosUncheckedUpdateInput>
  }

  /**
   * partidos delete
   */
  export type partidosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
    /**
     * Filter which partidos to delete.
     */
    where: partidosWhereUniqueInput
  }

  /**
   * partidos deleteMany
   */
  export type partidosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which partidos to delete
     */
    where?: partidosWhereInput
    /**
     * Limit how many partidos to delete.
     */
    limit?: number
  }

  /**
   * partidos.entradas
   */
  export type partidos$entradasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    where?: entradasWhereInput
    orderBy?: entradasOrderByWithRelationInput | entradasOrderByWithRelationInput[]
    cursor?: entradasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntradasScalarFieldEnum | EntradasScalarFieldEnum[]
  }

  /**
   * partidos without action
   */
  export type partidosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the partidos
     */
    select?: partidosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the partidos
     */
    omit?: partidosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: partidosInclude<ExtArgs> | null
  }


  /**
   * Model entradas
   */

  export type AggregateEntradas = {
    _count: EntradasCountAggregateOutputType | null
    _avg: EntradasAvgAggregateOutputType | null
    _sum: EntradasSumAggregateOutputType | null
    _min: EntradasMinAggregateOutputType | null
    _max: EntradasMaxAggregateOutputType | null
  }

  export type EntradasAvgAggregateOutputType = {
    id: number | null
    id_partido: number | null
    id_socio: number | null
    valor: number | null
  }

  export type EntradasSumAggregateOutputType = {
    id: number | null
    id_partido: number | null
    id_socio: number | null
    valor: number | null
  }

  export type EntradasMinAggregateOutputType = {
    id: number | null
    id_partido: number | null
    id_socio: number | null
    valor: number | null
    metodo_pago: $Enums.MetodoPago | null
  }

  export type EntradasMaxAggregateOutputType = {
    id: number | null
    id_partido: number | null
    id_socio: number | null
    valor: number | null
    metodo_pago: $Enums.MetodoPago | null
  }

  export type EntradasCountAggregateOutputType = {
    id: number
    id_partido: number
    id_socio: number
    valor: number
    metodo_pago: number
    _all: number
  }


  export type EntradasAvgAggregateInputType = {
    id?: true
    id_partido?: true
    id_socio?: true
    valor?: true
  }

  export type EntradasSumAggregateInputType = {
    id?: true
    id_partido?: true
    id_socio?: true
    valor?: true
  }

  export type EntradasMinAggregateInputType = {
    id?: true
    id_partido?: true
    id_socio?: true
    valor?: true
    metodo_pago?: true
  }

  export type EntradasMaxAggregateInputType = {
    id?: true
    id_partido?: true
    id_socio?: true
    valor?: true
    metodo_pago?: true
  }

  export type EntradasCountAggregateInputType = {
    id?: true
    id_partido?: true
    id_socio?: true
    valor?: true
    metodo_pago?: true
    _all?: true
  }

  export type EntradasAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which entradas to aggregate.
     */
    where?: entradasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entradas to fetch.
     */
    orderBy?: entradasOrderByWithRelationInput | entradasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: entradasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned entradas
    **/
    _count?: true | EntradasCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EntradasAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EntradasSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntradasMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntradasMaxAggregateInputType
  }

  export type GetEntradasAggregateType<T extends EntradasAggregateArgs> = {
        [P in keyof T & keyof AggregateEntradas]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntradas[P]>
      : GetScalarType<T[P], AggregateEntradas[P]>
  }




  export type entradasGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: entradasWhereInput
    orderBy?: entradasOrderByWithAggregationInput | entradasOrderByWithAggregationInput[]
    by: EntradasScalarFieldEnum[] | EntradasScalarFieldEnum
    having?: entradasScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntradasCountAggregateInputType | true
    _avg?: EntradasAvgAggregateInputType
    _sum?: EntradasSumAggregateInputType
    _min?: EntradasMinAggregateInputType
    _max?: EntradasMaxAggregateInputType
  }

  export type EntradasGroupByOutputType = {
    id: number
    id_partido: number
    id_socio: number
    valor: number
    metodo_pago: $Enums.MetodoPago
    _count: EntradasCountAggregateOutputType | null
    _avg: EntradasAvgAggregateOutputType | null
    _sum: EntradasSumAggregateOutputType | null
    _min: EntradasMinAggregateOutputType | null
    _max: EntradasMaxAggregateOutputType | null
  }

  type GetEntradasGroupByPayload<T extends entradasGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntradasGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntradasGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntradasGroupByOutputType[P]>
            : GetScalarType<T[P], EntradasGroupByOutputType[P]>
        }
      >
    >


  export type entradasSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    id_partido?: boolean
    id_socio?: boolean
    valor?: boolean
    metodo_pago?: boolean
    partido?: boolean | partidosDefaultArgs<ExtArgs>
    socio?: boolean | sociosDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entradas"]>



  export type entradasSelectScalar = {
    id?: boolean
    id_partido?: boolean
    id_socio?: boolean
    valor?: boolean
    metodo_pago?: boolean
  }

  export type entradasOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "id_partido" | "id_socio" | "valor" | "metodo_pago", ExtArgs["result"]["entradas"]>
  export type entradasInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    partido?: boolean | partidosDefaultArgs<ExtArgs>
    socio?: boolean | sociosDefaultArgs<ExtArgs>
  }

  export type $entradasPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "entradas"
    objects: {
      partido: Prisma.$partidosPayload<ExtArgs>
      socio: Prisma.$sociosPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      id_partido: number
      id_socio: number
      valor: number
      metodo_pago: $Enums.MetodoPago
    }, ExtArgs["result"]["entradas"]>
    composites: {}
  }

  type entradasGetPayload<S extends boolean | null | undefined | entradasDefaultArgs> = $Result.GetResult<Prisma.$entradasPayload, S>

  type entradasCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<entradasFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EntradasCountAggregateInputType | true
    }

  export interface entradasDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['entradas'], meta: { name: 'entradas' } }
    /**
     * Find zero or one Entradas that matches the filter.
     * @param {entradasFindUniqueArgs} args - Arguments to find a Entradas
     * @example
     * // Get one Entradas
     * const entradas = await prisma.entradas.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends entradasFindUniqueArgs>(args: SelectSubset<T, entradasFindUniqueArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Entradas that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {entradasFindUniqueOrThrowArgs} args - Arguments to find a Entradas
     * @example
     * // Get one Entradas
     * const entradas = await prisma.entradas.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends entradasFindUniqueOrThrowArgs>(args: SelectSubset<T, entradasFindUniqueOrThrowArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Entradas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entradasFindFirstArgs} args - Arguments to find a Entradas
     * @example
     * // Get one Entradas
     * const entradas = await prisma.entradas.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends entradasFindFirstArgs>(args?: SelectSubset<T, entradasFindFirstArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Entradas that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entradasFindFirstOrThrowArgs} args - Arguments to find a Entradas
     * @example
     * // Get one Entradas
     * const entradas = await prisma.entradas.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends entradasFindFirstOrThrowArgs>(args?: SelectSubset<T, entradasFindFirstOrThrowArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Entradas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entradasFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entradas
     * const entradas = await prisma.entradas.findMany()
     * 
     * // Get first 10 Entradas
     * const entradas = await prisma.entradas.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entradasWithIdOnly = await prisma.entradas.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends entradasFindManyArgs>(args?: SelectSubset<T, entradasFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Entradas.
     * @param {entradasCreateArgs} args - Arguments to create a Entradas.
     * @example
     * // Create one Entradas
     * const Entradas = await prisma.entradas.create({
     *   data: {
     *     // ... data to create a Entradas
     *   }
     * })
     * 
     */
    create<T extends entradasCreateArgs>(args: SelectSubset<T, entradasCreateArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Entradas.
     * @param {entradasCreateManyArgs} args - Arguments to create many Entradas.
     * @example
     * // Create many Entradas
     * const entradas = await prisma.entradas.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends entradasCreateManyArgs>(args?: SelectSubset<T, entradasCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Entradas.
     * @param {entradasDeleteArgs} args - Arguments to delete one Entradas.
     * @example
     * // Delete one Entradas
     * const Entradas = await prisma.entradas.delete({
     *   where: {
     *     // ... filter to delete one Entradas
     *   }
     * })
     * 
     */
    delete<T extends entradasDeleteArgs>(args: SelectSubset<T, entradasDeleteArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Entradas.
     * @param {entradasUpdateArgs} args - Arguments to update one Entradas.
     * @example
     * // Update one Entradas
     * const entradas = await prisma.entradas.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends entradasUpdateArgs>(args: SelectSubset<T, entradasUpdateArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Entradas.
     * @param {entradasDeleteManyArgs} args - Arguments to filter Entradas to delete.
     * @example
     * // Delete a few Entradas
     * const { count } = await prisma.entradas.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends entradasDeleteManyArgs>(args?: SelectSubset<T, entradasDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entradasUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entradas
     * const entradas = await prisma.entradas.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends entradasUpdateManyArgs>(args: SelectSubset<T, entradasUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Entradas.
     * @param {entradasUpsertArgs} args - Arguments to update or create a Entradas.
     * @example
     * // Update or create a Entradas
     * const entradas = await prisma.entradas.upsert({
     *   create: {
     *     // ... data to create a Entradas
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entradas we want to update
     *   }
     * })
     */
    upsert<T extends entradasUpsertArgs>(args: SelectSubset<T, entradasUpsertArgs<ExtArgs>>): Prisma__entradasClient<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Entradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entradasCountArgs} args - Arguments to filter Entradas to count.
     * @example
     * // Count the number of Entradas
     * const count = await prisma.entradas.count({
     *   where: {
     *     // ... the filter for the Entradas we want to count
     *   }
     * })
    **/
    count<T extends entradasCountArgs>(
      args?: Subset<T, entradasCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntradasCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntradasAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntradasAggregateArgs>(args: Subset<T, EntradasAggregateArgs>): Prisma.PrismaPromise<GetEntradasAggregateType<T>>

    /**
     * Group by Entradas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {entradasGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends entradasGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: entradasGroupByArgs['orderBy'] }
        : { orderBy?: entradasGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, entradasGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntradasGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the entradas model
   */
  readonly fields: entradasFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for entradas.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__entradasClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    partido<T extends partidosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, partidosDefaultArgs<ExtArgs>>): Prisma__partidosClient<$Result.GetResult<Prisma.$partidosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    socio<T extends sociosDefaultArgs<ExtArgs> = {}>(args?: Subset<T, sociosDefaultArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the entradas model
   */
  interface entradasFieldRefs {
    readonly id: FieldRef<"entradas", 'Int'>
    readonly id_partido: FieldRef<"entradas", 'Int'>
    readonly id_socio: FieldRef<"entradas", 'Int'>
    readonly valor: FieldRef<"entradas", 'Float'>
    readonly metodo_pago: FieldRef<"entradas", 'MetodoPago'>
  }
    

  // Custom InputTypes
  /**
   * entradas findUnique
   */
  export type entradasFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * Filter, which entradas to fetch.
     */
    where: entradasWhereUniqueInput
  }

  /**
   * entradas findUniqueOrThrow
   */
  export type entradasFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * Filter, which entradas to fetch.
     */
    where: entradasWhereUniqueInput
  }

  /**
   * entradas findFirst
   */
  export type entradasFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * Filter, which entradas to fetch.
     */
    where?: entradasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entradas to fetch.
     */
    orderBy?: entradasOrderByWithRelationInput | entradasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for entradas.
     */
    cursor?: entradasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of entradas.
     */
    distinct?: EntradasScalarFieldEnum | EntradasScalarFieldEnum[]
  }

  /**
   * entradas findFirstOrThrow
   */
  export type entradasFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * Filter, which entradas to fetch.
     */
    where?: entradasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entradas to fetch.
     */
    orderBy?: entradasOrderByWithRelationInput | entradasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for entradas.
     */
    cursor?: entradasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entradas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of entradas.
     */
    distinct?: EntradasScalarFieldEnum | EntradasScalarFieldEnum[]
  }

  /**
   * entradas findMany
   */
  export type entradasFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * Filter, which entradas to fetch.
     */
    where?: entradasWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of entradas to fetch.
     */
    orderBy?: entradasOrderByWithRelationInput | entradasOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing entradas.
     */
    cursor?: entradasWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` entradas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` entradas.
     */
    skip?: number
    distinct?: EntradasScalarFieldEnum | EntradasScalarFieldEnum[]
  }

  /**
   * entradas create
   */
  export type entradasCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * The data needed to create a entradas.
     */
    data: XOR<entradasCreateInput, entradasUncheckedCreateInput>
  }

  /**
   * entradas createMany
   */
  export type entradasCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many entradas.
     */
    data: entradasCreateManyInput | entradasCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * entradas update
   */
  export type entradasUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * The data needed to update a entradas.
     */
    data: XOR<entradasUpdateInput, entradasUncheckedUpdateInput>
    /**
     * Choose, which entradas to update.
     */
    where: entradasWhereUniqueInput
  }

  /**
   * entradas updateMany
   */
  export type entradasUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update entradas.
     */
    data: XOR<entradasUpdateManyMutationInput, entradasUncheckedUpdateManyInput>
    /**
     * Filter which entradas to update
     */
    where?: entradasWhereInput
    /**
     * Limit how many entradas to update.
     */
    limit?: number
  }

  /**
   * entradas upsert
   */
  export type entradasUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * The filter to search for the entradas to update in case it exists.
     */
    where: entradasWhereUniqueInput
    /**
     * In case the entradas found by the `where` argument doesn't exist, create a new entradas with this data.
     */
    create: XOR<entradasCreateInput, entradasUncheckedCreateInput>
    /**
     * In case the entradas was found with the provided `where` argument, update it with this data.
     */
    update: XOR<entradasUpdateInput, entradasUncheckedUpdateInput>
  }

  /**
   * entradas delete
   */
  export type entradasDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    /**
     * Filter which entradas to delete.
     */
    where: entradasWhereUniqueInput
  }

  /**
   * entradas deleteMany
   */
  export type entradasDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which entradas to delete
     */
    where?: entradasWhereInput
    /**
     * Limit how many entradas to delete.
     */
    limit?: number
  }

  /**
   * entradas without action
   */
  export type entradasDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
  }


  /**
   * Model socios
   */

  export type AggregateSocios = {
    _count: SociosCountAggregateOutputType | null
    _avg: SociosAvgAggregateOutputType | null
    _sum: SociosSumAggregateOutputType | null
    _min: SociosMinAggregateOutputType | null
    _max: SociosMaxAggregateOutputType | null
  }

  export type SociosAvgAggregateOutputType = {
    id: number | null
  }

  export type SociosSumAggregateOutputType = {
    id: number | null
  }

  export type SociosMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    fecha_nac: Date | null
    email: string | null
    password: string | null
    metodo_pago: string | null
    activo: boolean | null
    creado_en: Date | null
  }

  export type SociosMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    fecha_nac: Date | null
    email: string | null
    password: string | null
    metodo_pago: string | null
    activo: boolean | null
    creado_en: Date | null
  }

  export type SociosCountAggregateOutputType = {
    id: number
    nombre: number
    fecha_nac: number
    email: number
    password: number
    metodo_pago: number
    activo: number
    creado_en: number
    _all: number
  }


  export type SociosAvgAggregateInputType = {
    id?: true
  }

  export type SociosSumAggregateInputType = {
    id?: true
  }

  export type SociosMinAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nac?: true
    email?: true
    password?: true
    metodo_pago?: true
    activo?: true
    creado_en?: true
  }

  export type SociosMaxAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nac?: true
    email?: true
    password?: true
    metodo_pago?: true
    activo?: true
    creado_en?: true
  }

  export type SociosCountAggregateInputType = {
    id?: true
    nombre?: true
    fecha_nac?: true
    email?: true
    password?: true
    metodo_pago?: true
    activo?: true
    creado_en?: true
    _all?: true
  }

  export type SociosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which socios to aggregate.
     */
    where?: sociosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socios to fetch.
     */
    orderBy?: sociosOrderByWithRelationInput | sociosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sociosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned socios
    **/
    _count?: true | SociosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SociosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SociosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SociosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SociosMaxAggregateInputType
  }

  export type GetSociosAggregateType<T extends SociosAggregateArgs> = {
        [P in keyof T & keyof AggregateSocios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocios[P]>
      : GetScalarType<T[P], AggregateSocios[P]>
  }




  export type sociosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sociosWhereInput
    orderBy?: sociosOrderByWithAggregationInput | sociosOrderByWithAggregationInput[]
    by: SociosScalarFieldEnum[] | SociosScalarFieldEnum
    having?: sociosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SociosCountAggregateInputType | true
    _avg?: SociosAvgAggregateInputType
    _sum?: SociosSumAggregateInputType
    _min?: SociosMinAggregateInputType
    _max?: SociosMaxAggregateInputType
  }

  export type SociosGroupByOutputType = {
    id: number
    nombre: string
    fecha_nac: Date
    email: string
    password: string
    metodo_pago: string
    activo: boolean
    creado_en: Date
    _count: SociosCountAggregateOutputType | null
    _avg: SociosAvgAggregateOutputType | null
    _sum: SociosSumAggregateOutputType | null
    _min: SociosMinAggregateOutputType | null
    _max: SociosMaxAggregateOutputType | null
  }

  type GetSociosGroupByPayload<T extends sociosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SociosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SociosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SociosGroupByOutputType[P]>
            : GetScalarType<T[P], SociosGroupByOutputType[P]>
        }
      >
    >


  export type sociosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fecha_nac?: boolean
    email?: boolean
    password?: boolean
    metodo_pago?: boolean
    activo?: boolean
    creado_en?: boolean
    entradas?: boolean | socios$entradasArgs<ExtArgs>
    _count?: boolean | SociosCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socios"]>



  export type sociosSelectScalar = {
    id?: boolean
    nombre?: boolean
    fecha_nac?: boolean
    email?: boolean
    password?: boolean
    metodo_pago?: boolean
    activo?: boolean
    creado_en?: boolean
  }

  export type sociosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "nombre" | "fecha_nac" | "email" | "password" | "metodo_pago" | "activo" | "creado_en", ExtArgs["result"]["socios"]>
  export type sociosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entradas?: boolean | socios$entradasArgs<ExtArgs>
    _count?: boolean | SociosCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $sociosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "socios"
    objects: {
      entradas: Prisma.$entradasPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      fecha_nac: Date
      email: string
      password: string
      metodo_pago: string
      activo: boolean
      creado_en: Date
    }, ExtArgs["result"]["socios"]>
    composites: {}
  }

  type sociosGetPayload<S extends boolean | null | undefined | sociosDefaultArgs> = $Result.GetResult<Prisma.$sociosPayload, S>

  type sociosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sociosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SociosCountAggregateInputType | true
    }

  export interface sociosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['socios'], meta: { name: 'socios' } }
    /**
     * Find zero or one Socios that matches the filter.
     * @param {sociosFindUniqueArgs} args - Arguments to find a Socios
     * @example
     * // Get one Socios
     * const socios = await prisma.socios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sociosFindUniqueArgs>(args: SelectSubset<T, sociosFindUniqueArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Socios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sociosFindUniqueOrThrowArgs} args - Arguments to find a Socios
     * @example
     * // Get one Socios
     * const socios = await prisma.socios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sociosFindUniqueOrThrowArgs>(args: SelectSubset<T, sociosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Socios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sociosFindFirstArgs} args - Arguments to find a Socios
     * @example
     * // Get one Socios
     * const socios = await prisma.socios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sociosFindFirstArgs>(args?: SelectSubset<T, sociosFindFirstArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Socios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sociosFindFirstOrThrowArgs} args - Arguments to find a Socios
     * @example
     * // Get one Socios
     * const socios = await prisma.socios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sociosFindFirstOrThrowArgs>(args?: SelectSubset<T, sociosFindFirstOrThrowArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Socios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sociosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Socios
     * const socios = await prisma.socios.findMany()
     * 
     * // Get first 10 Socios
     * const socios = await prisma.socios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sociosWithIdOnly = await prisma.socios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sociosFindManyArgs>(args?: SelectSubset<T, sociosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Socios.
     * @param {sociosCreateArgs} args - Arguments to create a Socios.
     * @example
     * // Create one Socios
     * const Socios = await prisma.socios.create({
     *   data: {
     *     // ... data to create a Socios
     *   }
     * })
     * 
     */
    create<T extends sociosCreateArgs>(args: SelectSubset<T, sociosCreateArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Socios.
     * @param {sociosCreateManyArgs} args - Arguments to create many Socios.
     * @example
     * // Create many Socios
     * const socios = await prisma.socios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sociosCreateManyArgs>(args?: SelectSubset<T, sociosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Socios.
     * @param {sociosDeleteArgs} args - Arguments to delete one Socios.
     * @example
     * // Delete one Socios
     * const Socios = await prisma.socios.delete({
     *   where: {
     *     // ... filter to delete one Socios
     *   }
     * })
     * 
     */
    delete<T extends sociosDeleteArgs>(args: SelectSubset<T, sociosDeleteArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Socios.
     * @param {sociosUpdateArgs} args - Arguments to update one Socios.
     * @example
     * // Update one Socios
     * const socios = await prisma.socios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sociosUpdateArgs>(args: SelectSubset<T, sociosUpdateArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Socios.
     * @param {sociosDeleteManyArgs} args - Arguments to filter Socios to delete.
     * @example
     * // Delete a few Socios
     * const { count } = await prisma.socios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sociosDeleteManyArgs>(args?: SelectSubset<T, sociosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Socios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sociosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Socios
     * const socios = await prisma.socios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sociosUpdateManyArgs>(args: SelectSubset<T, sociosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Socios.
     * @param {sociosUpsertArgs} args - Arguments to update or create a Socios.
     * @example
     * // Update or create a Socios
     * const socios = await prisma.socios.upsert({
     *   create: {
     *     // ... data to create a Socios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Socios we want to update
     *   }
     * })
     */
    upsert<T extends sociosUpsertArgs>(args: SelectSubset<T, sociosUpsertArgs<ExtArgs>>): Prisma__sociosClient<$Result.GetResult<Prisma.$sociosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Socios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sociosCountArgs} args - Arguments to filter Socios to count.
     * @example
     * // Count the number of Socios
     * const count = await prisma.socios.count({
     *   where: {
     *     // ... the filter for the Socios we want to count
     *   }
     * })
    **/
    count<T extends sociosCountArgs>(
      args?: Subset<T, sociosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SociosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Socios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SociosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SociosAggregateArgs>(args: Subset<T, SociosAggregateArgs>): Prisma.PrismaPromise<GetSociosAggregateType<T>>

    /**
     * Group by Socios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sociosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sociosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sociosGroupByArgs['orderBy'] }
        : { orderBy?: sociosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sociosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSociosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the socios model
   */
  readonly fields: sociosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for socios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sociosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entradas<T extends socios$entradasArgs<ExtArgs> = {}>(args?: Subset<T, socios$entradasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$entradasPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the socios model
   */
  interface sociosFieldRefs {
    readonly id: FieldRef<"socios", 'Int'>
    readonly nombre: FieldRef<"socios", 'String'>
    readonly fecha_nac: FieldRef<"socios", 'DateTime'>
    readonly email: FieldRef<"socios", 'String'>
    readonly password: FieldRef<"socios", 'String'>
    readonly metodo_pago: FieldRef<"socios", 'String'>
    readonly activo: FieldRef<"socios", 'Boolean'>
    readonly creado_en: FieldRef<"socios", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * socios findUnique
   */
  export type sociosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * Filter, which socios to fetch.
     */
    where: sociosWhereUniqueInput
  }

  /**
   * socios findUniqueOrThrow
   */
  export type sociosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * Filter, which socios to fetch.
     */
    where: sociosWhereUniqueInput
  }

  /**
   * socios findFirst
   */
  export type sociosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * Filter, which socios to fetch.
     */
    where?: sociosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socios to fetch.
     */
    orderBy?: sociosOrderByWithRelationInput | sociosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for socios.
     */
    cursor?: sociosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of socios.
     */
    distinct?: SociosScalarFieldEnum | SociosScalarFieldEnum[]
  }

  /**
   * socios findFirstOrThrow
   */
  export type sociosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * Filter, which socios to fetch.
     */
    where?: sociosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socios to fetch.
     */
    orderBy?: sociosOrderByWithRelationInput | sociosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for socios.
     */
    cursor?: sociosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of socios.
     */
    distinct?: SociosScalarFieldEnum | SociosScalarFieldEnum[]
  }

  /**
   * socios findMany
   */
  export type sociosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * Filter, which socios to fetch.
     */
    where?: sociosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of socios to fetch.
     */
    orderBy?: sociosOrderByWithRelationInput | sociosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing socios.
     */
    cursor?: sociosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` socios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` socios.
     */
    skip?: number
    distinct?: SociosScalarFieldEnum | SociosScalarFieldEnum[]
  }

  /**
   * socios create
   */
  export type sociosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * The data needed to create a socios.
     */
    data: XOR<sociosCreateInput, sociosUncheckedCreateInput>
  }

  /**
   * socios createMany
   */
  export type sociosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many socios.
     */
    data: sociosCreateManyInput | sociosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * socios update
   */
  export type sociosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * The data needed to update a socios.
     */
    data: XOR<sociosUpdateInput, sociosUncheckedUpdateInput>
    /**
     * Choose, which socios to update.
     */
    where: sociosWhereUniqueInput
  }

  /**
   * socios updateMany
   */
  export type sociosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update socios.
     */
    data: XOR<sociosUpdateManyMutationInput, sociosUncheckedUpdateManyInput>
    /**
     * Filter which socios to update
     */
    where?: sociosWhereInput
    /**
     * Limit how many socios to update.
     */
    limit?: number
  }

  /**
   * socios upsert
   */
  export type sociosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * The filter to search for the socios to update in case it exists.
     */
    where: sociosWhereUniqueInput
    /**
     * In case the socios found by the `where` argument doesn't exist, create a new socios with this data.
     */
    create: XOR<sociosCreateInput, sociosUncheckedCreateInput>
    /**
     * In case the socios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sociosUpdateInput, sociosUncheckedUpdateInput>
  }

  /**
   * socios delete
   */
  export type sociosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
    /**
     * Filter which socios to delete.
     */
    where: sociosWhereUniqueInput
  }

  /**
   * socios deleteMany
   */
  export type sociosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which socios to delete
     */
    where?: sociosWhereInput
    /**
     * Limit how many socios to delete.
     */
    limit?: number
  }

  /**
   * socios.entradas
   */
  export type socios$entradasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the entradas
     */
    select?: entradasSelect<ExtArgs> | null
    /**
     * Omit specific fields from the entradas
     */
    omit?: entradasOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: entradasInclude<ExtArgs> | null
    where?: entradasWhereInput
    orderBy?: entradasOrderByWithRelationInput | entradasOrderByWithRelationInput[]
    cursor?: entradasWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EntradasScalarFieldEnum | EntradasScalarFieldEnum[]
  }

  /**
   * socios without action
   */
  export type sociosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the socios
     */
    select?: sociosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the socios
     */
    omit?: sociosOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: sociosInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const JugadoresScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    posicion: 'posicion',
    dorsal: 'dorsal',
    url_imagen: 'url_imagen',
    edad: 'edad',
    nacionalidad: 'nacionalidad',
    peso: 'peso',
    lugar_nacimiento: 'lugar_nacimiento'
  };

  export type JugadoresScalarFieldEnum = (typeof JugadoresScalarFieldEnum)[keyof typeof JugadoresScalarFieldEnum]


  export const NoticiasScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    tipo: 'tipo',
    resumen: 'resumen',
    descripcion: 'descripcion',
    fecha: 'fecha',
    url_imagen: 'url_imagen'
  };

  export type NoticiasScalarFieldEnum = (typeof NoticiasScalarFieldEnum)[keyof typeof NoticiasScalarFieldEnum]


  export const PartidosScalarFieldEnum: {
    id: 'id',
    fecha: 'fecha',
    rival: 'rival',
    resultado: 'resultado'
  };

  export type PartidosScalarFieldEnum = (typeof PartidosScalarFieldEnum)[keyof typeof PartidosScalarFieldEnum]


  export const EntradasScalarFieldEnum: {
    id: 'id',
    id_partido: 'id_partido',
    id_socio: 'id_socio',
    valor: 'valor',
    metodo_pago: 'metodo_pago'
  };

  export type EntradasScalarFieldEnum = (typeof EntradasScalarFieldEnum)[keyof typeof EntradasScalarFieldEnum]


  export const SociosScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    fecha_nac: 'fecha_nac',
    email: 'email',
    password: 'password',
    metodo_pago: 'metodo_pago',
    activo: 'activo',
    creado_en: 'creado_en'
  };

  export type SociosScalarFieldEnum = (typeof SociosScalarFieldEnum)[keyof typeof SociosScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const jugadoresOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    posicion: 'posicion',
    url_imagen: 'url_imagen',
    nacionalidad: 'nacionalidad',
    lugar_nacimiento: 'lugar_nacimiento'
  };

  export type jugadoresOrderByRelevanceFieldEnum = (typeof jugadoresOrderByRelevanceFieldEnum)[keyof typeof jugadoresOrderByRelevanceFieldEnum]


  export const noticiasOrderByRelevanceFieldEnum: {
    titulo: 'titulo',
    resumen: 'resumen',
    descripcion: 'descripcion',
    url_imagen: 'url_imagen'
  };

  export type noticiasOrderByRelevanceFieldEnum = (typeof noticiasOrderByRelevanceFieldEnum)[keyof typeof noticiasOrderByRelevanceFieldEnum]


  export const partidosOrderByRelevanceFieldEnum: {
    rival: 'rival',
    resultado: 'resultado'
  };

  export type partidosOrderByRelevanceFieldEnum = (typeof partidosOrderByRelevanceFieldEnum)[keyof typeof partidosOrderByRelevanceFieldEnum]


  export const sociosOrderByRelevanceFieldEnum: {
    nombre: 'nombre',
    email: 'email',
    password: 'password',
    metodo_pago: 'metodo_pago'
  };

  export type sociosOrderByRelevanceFieldEnum = (typeof sociosOrderByRelevanceFieldEnum)[keyof typeof sociosOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'TipoNoticia'
   */
  export type EnumTipoNoticiaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TipoNoticia'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'MetodoPago'
   */
  export type EnumMetodoPagoFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MetodoPago'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    
  /**
   * Deep Input Types
   */


  export type jugadoresWhereInput = {
    AND?: jugadoresWhereInput | jugadoresWhereInput[]
    OR?: jugadoresWhereInput[]
    NOT?: jugadoresWhereInput | jugadoresWhereInput[]
    id?: IntFilter<"jugadores"> | number
    nombre?: StringFilter<"jugadores"> | string
    posicion?: StringFilter<"jugadores"> | string
    dorsal?: IntFilter<"jugadores"> | number
    url_imagen?: StringFilter<"jugadores"> | string
    edad?: IntNullableFilter<"jugadores"> | number | null
    nacionalidad?: StringNullableFilter<"jugadores"> | string | null
    peso?: FloatNullableFilter<"jugadores"> | number | null
    lugar_nacimiento?: StringNullableFilter<"jugadores"> | string | null
  }

  export type jugadoresOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    posicion?: SortOrder
    dorsal?: SortOrder
    url_imagen?: SortOrder
    edad?: SortOrderInput | SortOrder
    nacionalidad?: SortOrderInput | SortOrder
    peso?: SortOrderInput | SortOrder
    lugar_nacimiento?: SortOrderInput | SortOrder
    _relevance?: jugadoresOrderByRelevanceInput
  }

  export type jugadoresWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: jugadoresWhereInput | jugadoresWhereInput[]
    OR?: jugadoresWhereInput[]
    NOT?: jugadoresWhereInput | jugadoresWhereInput[]
    nombre?: StringFilter<"jugadores"> | string
    posicion?: StringFilter<"jugadores"> | string
    dorsal?: IntFilter<"jugadores"> | number
    url_imagen?: StringFilter<"jugadores"> | string
    edad?: IntNullableFilter<"jugadores"> | number | null
    nacionalidad?: StringNullableFilter<"jugadores"> | string | null
    peso?: FloatNullableFilter<"jugadores"> | number | null
    lugar_nacimiento?: StringNullableFilter<"jugadores"> | string | null
  }, "id">

  export type jugadoresOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    posicion?: SortOrder
    dorsal?: SortOrder
    url_imagen?: SortOrder
    edad?: SortOrderInput | SortOrder
    nacionalidad?: SortOrderInput | SortOrder
    peso?: SortOrderInput | SortOrder
    lugar_nacimiento?: SortOrderInput | SortOrder
    _count?: jugadoresCountOrderByAggregateInput
    _avg?: jugadoresAvgOrderByAggregateInput
    _max?: jugadoresMaxOrderByAggregateInput
    _min?: jugadoresMinOrderByAggregateInput
    _sum?: jugadoresSumOrderByAggregateInput
  }

  export type jugadoresScalarWhereWithAggregatesInput = {
    AND?: jugadoresScalarWhereWithAggregatesInput | jugadoresScalarWhereWithAggregatesInput[]
    OR?: jugadoresScalarWhereWithAggregatesInput[]
    NOT?: jugadoresScalarWhereWithAggregatesInput | jugadoresScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"jugadores"> | number
    nombre?: StringWithAggregatesFilter<"jugadores"> | string
    posicion?: StringWithAggregatesFilter<"jugadores"> | string
    dorsal?: IntWithAggregatesFilter<"jugadores"> | number
    url_imagen?: StringWithAggregatesFilter<"jugadores"> | string
    edad?: IntNullableWithAggregatesFilter<"jugadores"> | number | null
    nacionalidad?: StringNullableWithAggregatesFilter<"jugadores"> | string | null
    peso?: FloatNullableWithAggregatesFilter<"jugadores"> | number | null
    lugar_nacimiento?: StringNullableWithAggregatesFilter<"jugadores"> | string | null
  }

  export type noticiasWhereInput = {
    AND?: noticiasWhereInput | noticiasWhereInput[]
    OR?: noticiasWhereInput[]
    NOT?: noticiasWhereInput | noticiasWhereInput[]
    id?: IntFilter<"noticias"> | number
    titulo?: StringFilter<"noticias"> | string
    tipo?: EnumTipoNoticiaFilter<"noticias"> | $Enums.TipoNoticia
    resumen?: StringNullableFilter<"noticias"> | string | null
    descripcion?: StringFilter<"noticias"> | string
    fecha?: DateTimeFilter<"noticias"> | Date | string
    url_imagen?: StringFilter<"noticias"> | string
  }

  export type noticiasOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    tipo?: SortOrder
    resumen?: SortOrderInput | SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    url_imagen?: SortOrder
    _relevance?: noticiasOrderByRelevanceInput
  }

  export type noticiasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: noticiasWhereInput | noticiasWhereInput[]
    OR?: noticiasWhereInput[]
    NOT?: noticiasWhereInput | noticiasWhereInput[]
    titulo?: StringFilter<"noticias"> | string
    tipo?: EnumTipoNoticiaFilter<"noticias"> | $Enums.TipoNoticia
    resumen?: StringNullableFilter<"noticias"> | string | null
    descripcion?: StringFilter<"noticias"> | string
    fecha?: DateTimeFilter<"noticias"> | Date | string
    url_imagen?: StringFilter<"noticias"> | string
  }, "id">

  export type noticiasOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    tipo?: SortOrder
    resumen?: SortOrderInput | SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    url_imagen?: SortOrder
    _count?: noticiasCountOrderByAggregateInput
    _avg?: noticiasAvgOrderByAggregateInput
    _max?: noticiasMaxOrderByAggregateInput
    _min?: noticiasMinOrderByAggregateInput
    _sum?: noticiasSumOrderByAggregateInput
  }

  export type noticiasScalarWhereWithAggregatesInput = {
    AND?: noticiasScalarWhereWithAggregatesInput | noticiasScalarWhereWithAggregatesInput[]
    OR?: noticiasScalarWhereWithAggregatesInput[]
    NOT?: noticiasScalarWhereWithAggregatesInput | noticiasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"noticias"> | number
    titulo?: StringWithAggregatesFilter<"noticias"> | string
    tipo?: EnumTipoNoticiaWithAggregatesFilter<"noticias"> | $Enums.TipoNoticia
    resumen?: StringNullableWithAggregatesFilter<"noticias"> | string | null
    descripcion?: StringWithAggregatesFilter<"noticias"> | string
    fecha?: DateTimeWithAggregatesFilter<"noticias"> | Date | string
    url_imagen?: StringWithAggregatesFilter<"noticias"> | string
  }

  export type partidosWhereInput = {
    AND?: partidosWhereInput | partidosWhereInput[]
    OR?: partidosWhereInput[]
    NOT?: partidosWhereInput | partidosWhereInput[]
    id?: IntFilter<"partidos"> | number
    fecha?: DateTimeFilter<"partidos"> | Date | string
    rival?: StringFilter<"partidos"> | string
    resultado?: StringNullableFilter<"partidos"> | string | null
    entradas?: EntradasListRelationFilter
  }

  export type partidosOrderByWithRelationInput = {
    id?: SortOrder
    fecha?: SortOrder
    rival?: SortOrder
    resultado?: SortOrderInput | SortOrder
    entradas?: entradasOrderByRelationAggregateInput
    _relevance?: partidosOrderByRelevanceInput
  }

  export type partidosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: partidosWhereInput | partidosWhereInput[]
    OR?: partidosWhereInput[]
    NOT?: partidosWhereInput | partidosWhereInput[]
    fecha?: DateTimeFilter<"partidos"> | Date | string
    rival?: StringFilter<"partidos"> | string
    resultado?: StringNullableFilter<"partidos"> | string | null
    entradas?: EntradasListRelationFilter
  }, "id">

  export type partidosOrderByWithAggregationInput = {
    id?: SortOrder
    fecha?: SortOrder
    rival?: SortOrder
    resultado?: SortOrderInput | SortOrder
    _count?: partidosCountOrderByAggregateInput
    _avg?: partidosAvgOrderByAggregateInput
    _max?: partidosMaxOrderByAggregateInput
    _min?: partidosMinOrderByAggregateInput
    _sum?: partidosSumOrderByAggregateInput
  }

  export type partidosScalarWhereWithAggregatesInput = {
    AND?: partidosScalarWhereWithAggregatesInput | partidosScalarWhereWithAggregatesInput[]
    OR?: partidosScalarWhereWithAggregatesInput[]
    NOT?: partidosScalarWhereWithAggregatesInput | partidosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"partidos"> | number
    fecha?: DateTimeWithAggregatesFilter<"partidos"> | Date | string
    rival?: StringWithAggregatesFilter<"partidos"> | string
    resultado?: StringNullableWithAggregatesFilter<"partidos"> | string | null
  }

  export type entradasWhereInput = {
    AND?: entradasWhereInput | entradasWhereInput[]
    OR?: entradasWhereInput[]
    NOT?: entradasWhereInput | entradasWhereInput[]
    id?: IntFilter<"entradas"> | number
    id_partido?: IntFilter<"entradas"> | number
    id_socio?: IntFilter<"entradas"> | number
    valor?: FloatFilter<"entradas"> | number
    metodo_pago?: EnumMetodoPagoFilter<"entradas"> | $Enums.MetodoPago
    partido?: XOR<PartidosScalarRelationFilter, partidosWhereInput>
    socio?: XOR<SociosScalarRelationFilter, sociosWhereInput>
  }

  export type entradasOrderByWithRelationInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
    metodo_pago?: SortOrder
    partido?: partidosOrderByWithRelationInput
    socio?: sociosOrderByWithRelationInput
  }

  export type entradasWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: entradasWhereInput | entradasWhereInput[]
    OR?: entradasWhereInput[]
    NOT?: entradasWhereInput | entradasWhereInput[]
    id_partido?: IntFilter<"entradas"> | number
    id_socio?: IntFilter<"entradas"> | number
    valor?: FloatFilter<"entradas"> | number
    metodo_pago?: EnumMetodoPagoFilter<"entradas"> | $Enums.MetodoPago
    partido?: XOR<PartidosScalarRelationFilter, partidosWhereInput>
    socio?: XOR<SociosScalarRelationFilter, sociosWhereInput>
  }, "id">

  export type entradasOrderByWithAggregationInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
    metodo_pago?: SortOrder
    _count?: entradasCountOrderByAggregateInput
    _avg?: entradasAvgOrderByAggregateInput
    _max?: entradasMaxOrderByAggregateInput
    _min?: entradasMinOrderByAggregateInput
    _sum?: entradasSumOrderByAggregateInput
  }

  export type entradasScalarWhereWithAggregatesInput = {
    AND?: entradasScalarWhereWithAggregatesInput | entradasScalarWhereWithAggregatesInput[]
    OR?: entradasScalarWhereWithAggregatesInput[]
    NOT?: entradasScalarWhereWithAggregatesInput | entradasScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"entradas"> | number
    id_partido?: IntWithAggregatesFilter<"entradas"> | number
    id_socio?: IntWithAggregatesFilter<"entradas"> | number
    valor?: FloatWithAggregatesFilter<"entradas"> | number
    metodo_pago?: EnumMetodoPagoWithAggregatesFilter<"entradas"> | $Enums.MetodoPago
  }

  export type sociosWhereInput = {
    AND?: sociosWhereInput | sociosWhereInput[]
    OR?: sociosWhereInput[]
    NOT?: sociosWhereInput | sociosWhereInput[]
    id?: IntFilter<"socios"> | number
    nombre?: StringFilter<"socios"> | string
    fecha_nac?: DateTimeFilter<"socios"> | Date | string
    email?: StringFilter<"socios"> | string
    password?: StringFilter<"socios"> | string
    metodo_pago?: StringFilter<"socios"> | string
    activo?: BoolFilter<"socios"> | boolean
    creado_en?: DateTimeFilter<"socios"> | Date | string
    entradas?: EntradasListRelationFilter
  }

  export type sociosOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nac?: SortOrder
    email?: SortOrder
    password?: SortOrder
    metodo_pago?: SortOrder
    activo?: SortOrder
    creado_en?: SortOrder
    entradas?: entradasOrderByRelationAggregateInput
    _relevance?: sociosOrderByRelevanceInput
  }

  export type sociosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: sociosWhereInput | sociosWhereInput[]
    OR?: sociosWhereInput[]
    NOT?: sociosWhereInput | sociosWhereInput[]
    nombre?: StringFilter<"socios"> | string
    fecha_nac?: DateTimeFilter<"socios"> | Date | string
    password?: StringFilter<"socios"> | string
    metodo_pago?: StringFilter<"socios"> | string
    activo?: BoolFilter<"socios"> | boolean
    creado_en?: DateTimeFilter<"socios"> | Date | string
    entradas?: EntradasListRelationFilter
  }, "id" | "email">

  export type sociosOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nac?: SortOrder
    email?: SortOrder
    password?: SortOrder
    metodo_pago?: SortOrder
    activo?: SortOrder
    creado_en?: SortOrder
    _count?: sociosCountOrderByAggregateInput
    _avg?: sociosAvgOrderByAggregateInput
    _max?: sociosMaxOrderByAggregateInput
    _min?: sociosMinOrderByAggregateInput
    _sum?: sociosSumOrderByAggregateInput
  }

  export type sociosScalarWhereWithAggregatesInput = {
    AND?: sociosScalarWhereWithAggregatesInput | sociosScalarWhereWithAggregatesInput[]
    OR?: sociosScalarWhereWithAggregatesInput[]
    NOT?: sociosScalarWhereWithAggregatesInput | sociosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"socios"> | number
    nombre?: StringWithAggregatesFilter<"socios"> | string
    fecha_nac?: DateTimeWithAggregatesFilter<"socios"> | Date | string
    email?: StringWithAggregatesFilter<"socios"> | string
    password?: StringWithAggregatesFilter<"socios"> | string
    metodo_pago?: StringWithAggregatesFilter<"socios"> | string
    activo?: BoolWithAggregatesFilter<"socios"> | boolean
    creado_en?: DateTimeWithAggregatesFilter<"socios"> | Date | string
  }

  export type jugadoresCreateInput = {
    nombre: string
    posicion: string
    dorsal: number
    url_imagen: string
    edad?: number | null
    nacionalidad?: string | null
    peso?: number | null
    lugar_nacimiento?: string | null
  }

  export type jugadoresUncheckedCreateInput = {
    id?: number
    nombre: string
    posicion: string
    dorsal: number
    url_imagen: string
    edad?: number | null
    nacionalidad?: string | null
    peso?: number | null
    lugar_nacimiento?: string | null
  }

  export type jugadoresUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    posicion?: StringFieldUpdateOperationsInput | string
    dorsal?: IntFieldUpdateOperationsInput | number
    url_imagen?: StringFieldUpdateOperationsInput | string
    edad?: NullableIntFieldUpdateOperationsInput | number | null
    nacionalidad?: NullableStringFieldUpdateOperationsInput | string | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    lugar_nacimiento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jugadoresUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    posicion?: StringFieldUpdateOperationsInput | string
    dorsal?: IntFieldUpdateOperationsInput | number
    url_imagen?: StringFieldUpdateOperationsInput | string
    edad?: NullableIntFieldUpdateOperationsInput | number | null
    nacionalidad?: NullableStringFieldUpdateOperationsInput | string | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    lugar_nacimiento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jugadoresCreateManyInput = {
    id?: number
    nombre: string
    posicion: string
    dorsal: number
    url_imagen: string
    edad?: number | null
    nacionalidad?: string | null
    peso?: number | null
    lugar_nacimiento?: string | null
  }

  export type jugadoresUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    posicion?: StringFieldUpdateOperationsInput | string
    dorsal?: IntFieldUpdateOperationsInput | number
    url_imagen?: StringFieldUpdateOperationsInput | string
    edad?: NullableIntFieldUpdateOperationsInput | number | null
    nacionalidad?: NullableStringFieldUpdateOperationsInput | string | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    lugar_nacimiento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type jugadoresUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    posicion?: StringFieldUpdateOperationsInput | string
    dorsal?: IntFieldUpdateOperationsInput | number
    url_imagen?: StringFieldUpdateOperationsInput | string
    edad?: NullableIntFieldUpdateOperationsInput | number | null
    nacionalidad?: NullableStringFieldUpdateOperationsInput | string | null
    peso?: NullableFloatFieldUpdateOperationsInput | number | null
    lugar_nacimiento?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type noticiasCreateInput = {
    titulo: string
    tipo: $Enums.TipoNoticia
    resumen?: string | null
    descripcion: string
    fecha?: Date | string
    url_imagen: string
  }

  export type noticiasUncheckedCreateInput = {
    id?: number
    titulo: string
    tipo: $Enums.TipoNoticia
    resumen?: string | null
    descripcion: string
    fecha?: Date | string
    url_imagen: string
  }

  export type noticiasUpdateInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNoticiaFieldUpdateOperationsInput | $Enums.TipoNoticia
    resumen?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    url_imagen?: StringFieldUpdateOperationsInput | string
  }

  export type noticiasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNoticiaFieldUpdateOperationsInput | $Enums.TipoNoticia
    resumen?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    url_imagen?: StringFieldUpdateOperationsInput | string
  }

  export type noticiasCreateManyInput = {
    id?: number
    titulo: string
    tipo: $Enums.TipoNoticia
    resumen?: string | null
    descripcion: string
    fecha?: Date | string
    url_imagen: string
  }

  export type noticiasUpdateManyMutationInput = {
    titulo?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNoticiaFieldUpdateOperationsInput | $Enums.TipoNoticia
    resumen?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    url_imagen?: StringFieldUpdateOperationsInput | string
  }

  export type noticiasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    titulo?: StringFieldUpdateOperationsInput | string
    tipo?: EnumTipoNoticiaFieldUpdateOperationsInput | $Enums.TipoNoticia
    resumen?: NullableStringFieldUpdateOperationsInput | string | null
    descripcion?: StringFieldUpdateOperationsInput | string
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    url_imagen?: StringFieldUpdateOperationsInput | string
  }

  export type partidosCreateInput = {
    fecha: Date | string
    rival: string
    resultado?: string | null
    entradas?: entradasCreateNestedManyWithoutPartidoInput
  }

  export type partidosUncheckedCreateInput = {
    id?: number
    fecha: Date | string
    rival: string
    resultado?: string | null
    entradas?: entradasUncheckedCreateNestedManyWithoutPartidoInput
  }

  export type partidosUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    rival?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    entradas?: entradasUpdateManyWithoutPartidoNestedInput
  }

  export type partidosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    rival?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
    entradas?: entradasUncheckedUpdateManyWithoutPartidoNestedInput
  }

  export type partidosCreateManyInput = {
    id?: number
    fecha: Date | string
    rival: string
    resultado?: string | null
  }

  export type partidosUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    rival?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type partidosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    rival?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type entradasCreateInput = {
    valor: number
    metodo_pago: $Enums.MetodoPago
    partido: partidosCreateNestedOneWithoutEntradasInput
    socio: sociosCreateNestedOneWithoutEntradasInput
  }

  export type entradasUncheckedCreateInput = {
    id?: number
    id_partido: number
    id_socio: number
    valor: number
    metodo_pago: $Enums.MetodoPago
  }

  export type entradasUpdateInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    partido?: partidosUpdateOneRequiredWithoutEntradasNestedInput
    socio?: sociosUpdateOneRequiredWithoutEntradasNestedInput
  }

  export type entradasUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_partido?: IntFieldUpdateOperationsInput | number
    id_socio?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }

  export type entradasCreateManyInput = {
    id?: number
    id_partido: number
    id_socio: number
    valor: number
    metodo_pago: $Enums.MetodoPago
  }

  export type entradasUpdateManyMutationInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }

  export type entradasUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_partido?: IntFieldUpdateOperationsInput | number
    id_socio?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }

  export type sociosCreateInput = {
    nombre: string
    fecha_nac: Date | string
    email: string
    password: string
    metodo_pago: string
    activo?: boolean
    creado_en?: Date | string
    entradas?: entradasCreateNestedManyWithoutSocioInput
  }

  export type sociosUncheckedCreateInput = {
    id?: number
    nombre: string
    fecha_nac: Date | string
    email: string
    password: string
    metodo_pago: string
    activo?: boolean
    creado_en?: Date | string
    entradas?: entradasUncheckedCreateNestedManyWithoutSocioInput
  }

  export type sociosUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nac?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    metodo_pago?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
    entradas?: entradasUpdateManyWithoutSocioNestedInput
  }

  export type sociosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nac?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    metodo_pago?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
    entradas?: entradasUncheckedUpdateManyWithoutSocioNestedInput
  }

  export type sociosCreateManyInput = {
    id?: number
    nombre: string
    fecha_nac: Date | string
    email: string
    password: string
    metodo_pago: string
    activo?: boolean
    creado_en?: Date | string
  }

  export type sociosUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nac?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    metodo_pago?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sociosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nac?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    metodo_pago?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type jugadoresOrderByRelevanceInput = {
    fields: jugadoresOrderByRelevanceFieldEnum | jugadoresOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type jugadoresCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    posicion?: SortOrder
    dorsal?: SortOrder
    url_imagen?: SortOrder
    edad?: SortOrder
    nacionalidad?: SortOrder
    peso?: SortOrder
    lugar_nacimiento?: SortOrder
  }

  export type jugadoresAvgOrderByAggregateInput = {
    id?: SortOrder
    dorsal?: SortOrder
    edad?: SortOrder
    peso?: SortOrder
  }

  export type jugadoresMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    posicion?: SortOrder
    dorsal?: SortOrder
    url_imagen?: SortOrder
    edad?: SortOrder
    nacionalidad?: SortOrder
    peso?: SortOrder
    lugar_nacimiento?: SortOrder
  }

  export type jugadoresMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    posicion?: SortOrder
    dorsal?: SortOrder
    url_imagen?: SortOrder
    edad?: SortOrder
    nacionalidad?: SortOrder
    peso?: SortOrder
    lugar_nacimiento?: SortOrder
  }

  export type jugadoresSumOrderByAggregateInput = {
    id?: SortOrder
    dorsal?: SortOrder
    edad?: SortOrder
    peso?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumTipoNoticiaFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNoticia | EnumTipoNoticiaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNoticia[]
    notIn?: $Enums.TipoNoticia[]
    not?: NestedEnumTipoNoticiaFilter<$PrismaModel> | $Enums.TipoNoticia
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type noticiasOrderByRelevanceInput = {
    fields: noticiasOrderByRelevanceFieldEnum | noticiasOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type noticiasCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    tipo?: SortOrder
    resumen?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    url_imagen?: SortOrder
  }

  export type noticiasAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type noticiasMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    tipo?: SortOrder
    resumen?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    url_imagen?: SortOrder
  }

  export type noticiasMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    tipo?: SortOrder
    resumen?: SortOrder
    descripcion?: SortOrder
    fecha?: SortOrder
    url_imagen?: SortOrder
  }

  export type noticiasSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumTipoNoticiaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNoticia | EnumTipoNoticiaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNoticia[]
    notIn?: $Enums.TipoNoticia[]
    not?: NestedEnumTipoNoticiaWithAggregatesFilter<$PrismaModel> | $Enums.TipoNoticia
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoNoticiaFilter<$PrismaModel>
    _max?: NestedEnumTipoNoticiaFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EntradasListRelationFilter = {
    every?: entradasWhereInput
    some?: entradasWhereInput
    none?: entradasWhereInput
  }

  export type entradasOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type partidosOrderByRelevanceInput = {
    fields: partidosOrderByRelevanceFieldEnum | partidosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type partidosCountOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    rival?: SortOrder
    resultado?: SortOrder
  }

  export type partidosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type partidosMaxOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    rival?: SortOrder
    resultado?: SortOrder
  }

  export type partidosMinOrderByAggregateInput = {
    id?: SortOrder
    fecha?: SortOrder
    rival?: SortOrder
    resultado?: SortOrder
  }

  export type partidosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type PartidosScalarRelationFilter = {
    is?: partidosWhereInput
    isNot?: partidosWhereInput
  }

  export type SociosScalarRelationFilter = {
    is?: sociosWhereInput
    isNot?: sociosWhereInput
  }

  export type entradasCountOrderByAggregateInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
    metodo_pago?: SortOrder
  }

  export type entradasAvgOrderByAggregateInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
  }

  export type entradasMaxOrderByAggregateInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
    metodo_pago?: SortOrder
  }

  export type entradasMinOrderByAggregateInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
    metodo_pago?: SortOrder
  }

  export type entradasSumOrderByAggregateInput = {
    id?: SortOrder
    id_partido?: SortOrder
    id_socio?: SortOrder
    valor?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type sociosOrderByRelevanceInput = {
    fields: sociosOrderByRelevanceFieldEnum | sociosOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type sociosCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nac?: SortOrder
    email?: SortOrder
    password?: SortOrder
    metodo_pago?: SortOrder
    activo?: SortOrder
    creado_en?: SortOrder
  }

  export type sociosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type sociosMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nac?: SortOrder
    email?: SortOrder
    password?: SortOrder
    metodo_pago?: SortOrder
    activo?: SortOrder
    creado_en?: SortOrder
  }

  export type sociosMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fecha_nac?: SortOrder
    email?: SortOrder
    password?: SortOrder
    metodo_pago?: SortOrder
    activo?: SortOrder
    creado_en?: SortOrder
  }

  export type sociosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumTipoNoticiaFieldUpdateOperationsInput = {
    set?: $Enums.TipoNoticia
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type entradasCreateNestedManyWithoutPartidoInput = {
    create?: XOR<entradasCreateWithoutPartidoInput, entradasUncheckedCreateWithoutPartidoInput> | entradasCreateWithoutPartidoInput[] | entradasUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutPartidoInput | entradasCreateOrConnectWithoutPartidoInput[]
    createMany?: entradasCreateManyPartidoInputEnvelope
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
  }

  export type entradasUncheckedCreateNestedManyWithoutPartidoInput = {
    create?: XOR<entradasCreateWithoutPartidoInput, entradasUncheckedCreateWithoutPartidoInput> | entradasCreateWithoutPartidoInput[] | entradasUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutPartidoInput | entradasCreateOrConnectWithoutPartidoInput[]
    createMany?: entradasCreateManyPartidoInputEnvelope
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
  }

  export type entradasUpdateManyWithoutPartidoNestedInput = {
    create?: XOR<entradasCreateWithoutPartidoInput, entradasUncheckedCreateWithoutPartidoInput> | entradasCreateWithoutPartidoInput[] | entradasUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutPartidoInput | entradasCreateOrConnectWithoutPartidoInput[]
    upsert?: entradasUpsertWithWhereUniqueWithoutPartidoInput | entradasUpsertWithWhereUniqueWithoutPartidoInput[]
    createMany?: entradasCreateManyPartidoInputEnvelope
    set?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    disconnect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    delete?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    update?: entradasUpdateWithWhereUniqueWithoutPartidoInput | entradasUpdateWithWhereUniqueWithoutPartidoInput[]
    updateMany?: entradasUpdateManyWithWhereWithoutPartidoInput | entradasUpdateManyWithWhereWithoutPartidoInput[]
    deleteMany?: entradasScalarWhereInput | entradasScalarWhereInput[]
  }

  export type entradasUncheckedUpdateManyWithoutPartidoNestedInput = {
    create?: XOR<entradasCreateWithoutPartidoInput, entradasUncheckedCreateWithoutPartidoInput> | entradasCreateWithoutPartidoInput[] | entradasUncheckedCreateWithoutPartidoInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutPartidoInput | entradasCreateOrConnectWithoutPartidoInput[]
    upsert?: entradasUpsertWithWhereUniqueWithoutPartidoInput | entradasUpsertWithWhereUniqueWithoutPartidoInput[]
    createMany?: entradasCreateManyPartidoInputEnvelope
    set?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    disconnect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    delete?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    update?: entradasUpdateWithWhereUniqueWithoutPartidoInput | entradasUpdateWithWhereUniqueWithoutPartidoInput[]
    updateMany?: entradasUpdateManyWithWhereWithoutPartidoInput | entradasUpdateManyWithWhereWithoutPartidoInput[]
    deleteMany?: entradasScalarWhereInput | entradasScalarWhereInput[]
  }

  export type partidosCreateNestedOneWithoutEntradasInput = {
    create?: XOR<partidosCreateWithoutEntradasInput, partidosUncheckedCreateWithoutEntradasInput>
    connectOrCreate?: partidosCreateOrConnectWithoutEntradasInput
    connect?: partidosWhereUniqueInput
  }

  export type sociosCreateNestedOneWithoutEntradasInput = {
    create?: XOR<sociosCreateWithoutEntradasInput, sociosUncheckedCreateWithoutEntradasInput>
    connectOrCreate?: sociosCreateOrConnectWithoutEntradasInput
    connect?: sociosWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumMetodoPagoFieldUpdateOperationsInput = {
    set?: $Enums.MetodoPago
  }

  export type partidosUpdateOneRequiredWithoutEntradasNestedInput = {
    create?: XOR<partidosCreateWithoutEntradasInput, partidosUncheckedCreateWithoutEntradasInput>
    connectOrCreate?: partidosCreateOrConnectWithoutEntradasInput
    upsert?: partidosUpsertWithoutEntradasInput
    connect?: partidosWhereUniqueInput
    update?: XOR<XOR<partidosUpdateToOneWithWhereWithoutEntradasInput, partidosUpdateWithoutEntradasInput>, partidosUncheckedUpdateWithoutEntradasInput>
  }

  export type sociosUpdateOneRequiredWithoutEntradasNestedInput = {
    create?: XOR<sociosCreateWithoutEntradasInput, sociosUncheckedCreateWithoutEntradasInput>
    connectOrCreate?: sociosCreateOrConnectWithoutEntradasInput
    upsert?: sociosUpsertWithoutEntradasInput
    connect?: sociosWhereUniqueInput
    update?: XOR<XOR<sociosUpdateToOneWithWhereWithoutEntradasInput, sociosUpdateWithoutEntradasInput>, sociosUncheckedUpdateWithoutEntradasInput>
  }

  export type entradasCreateNestedManyWithoutSocioInput = {
    create?: XOR<entradasCreateWithoutSocioInput, entradasUncheckedCreateWithoutSocioInput> | entradasCreateWithoutSocioInput[] | entradasUncheckedCreateWithoutSocioInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutSocioInput | entradasCreateOrConnectWithoutSocioInput[]
    createMany?: entradasCreateManySocioInputEnvelope
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
  }

  export type entradasUncheckedCreateNestedManyWithoutSocioInput = {
    create?: XOR<entradasCreateWithoutSocioInput, entradasUncheckedCreateWithoutSocioInput> | entradasCreateWithoutSocioInput[] | entradasUncheckedCreateWithoutSocioInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutSocioInput | entradasCreateOrConnectWithoutSocioInput[]
    createMany?: entradasCreateManySocioInputEnvelope
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type entradasUpdateManyWithoutSocioNestedInput = {
    create?: XOR<entradasCreateWithoutSocioInput, entradasUncheckedCreateWithoutSocioInput> | entradasCreateWithoutSocioInput[] | entradasUncheckedCreateWithoutSocioInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutSocioInput | entradasCreateOrConnectWithoutSocioInput[]
    upsert?: entradasUpsertWithWhereUniqueWithoutSocioInput | entradasUpsertWithWhereUniqueWithoutSocioInput[]
    createMany?: entradasCreateManySocioInputEnvelope
    set?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    disconnect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    delete?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    update?: entradasUpdateWithWhereUniqueWithoutSocioInput | entradasUpdateWithWhereUniqueWithoutSocioInput[]
    updateMany?: entradasUpdateManyWithWhereWithoutSocioInput | entradasUpdateManyWithWhereWithoutSocioInput[]
    deleteMany?: entradasScalarWhereInput | entradasScalarWhereInput[]
  }

  export type entradasUncheckedUpdateManyWithoutSocioNestedInput = {
    create?: XOR<entradasCreateWithoutSocioInput, entradasUncheckedCreateWithoutSocioInput> | entradasCreateWithoutSocioInput[] | entradasUncheckedCreateWithoutSocioInput[]
    connectOrCreate?: entradasCreateOrConnectWithoutSocioInput | entradasCreateOrConnectWithoutSocioInput[]
    upsert?: entradasUpsertWithWhereUniqueWithoutSocioInput | entradasUpsertWithWhereUniqueWithoutSocioInput[]
    createMany?: entradasCreateManySocioInputEnvelope
    set?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    disconnect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    delete?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    connect?: entradasWhereUniqueInput | entradasWhereUniqueInput[]
    update?: entradasUpdateWithWhereUniqueWithoutSocioInput | entradasUpdateWithWhereUniqueWithoutSocioInput[]
    updateMany?: entradasUpdateManyWithWhereWithoutSocioInput | entradasUpdateManyWithWhereWithoutSocioInput[]
    deleteMany?: entradasScalarWhereInput | entradasScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumTipoNoticiaFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNoticia | EnumTipoNoticiaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNoticia[]
    notIn?: $Enums.TipoNoticia[]
    not?: NestedEnumTipoNoticiaFilter<$PrismaModel> | $Enums.TipoNoticia
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumTipoNoticiaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TipoNoticia | EnumTipoNoticiaFieldRefInput<$PrismaModel>
    in?: $Enums.TipoNoticia[]
    notIn?: $Enums.TipoNoticia[]
    not?: NestedEnumTipoNoticiaWithAggregatesFilter<$PrismaModel> | $Enums.TipoNoticia
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTipoNoticiaFilter<$PrismaModel>
    _max?: NestedEnumTipoNoticiaFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoFilter<$PrismaModel> | $Enums.MetodoPago
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MetodoPago | EnumMetodoPagoFieldRefInput<$PrismaModel>
    in?: $Enums.MetodoPago[]
    notIn?: $Enums.MetodoPago[]
    not?: NestedEnumMetodoPagoWithAggregatesFilter<$PrismaModel> | $Enums.MetodoPago
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMetodoPagoFilter<$PrismaModel>
    _max?: NestedEnumMetodoPagoFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type entradasCreateWithoutPartidoInput = {
    valor: number
    metodo_pago: $Enums.MetodoPago
    socio: sociosCreateNestedOneWithoutEntradasInput
  }

  export type entradasUncheckedCreateWithoutPartidoInput = {
    id?: number
    id_socio: number
    valor: number
    metodo_pago: $Enums.MetodoPago
  }

  export type entradasCreateOrConnectWithoutPartidoInput = {
    where: entradasWhereUniqueInput
    create: XOR<entradasCreateWithoutPartidoInput, entradasUncheckedCreateWithoutPartidoInput>
  }

  export type entradasCreateManyPartidoInputEnvelope = {
    data: entradasCreateManyPartidoInput | entradasCreateManyPartidoInput[]
    skipDuplicates?: boolean
  }

  export type entradasUpsertWithWhereUniqueWithoutPartidoInput = {
    where: entradasWhereUniqueInput
    update: XOR<entradasUpdateWithoutPartidoInput, entradasUncheckedUpdateWithoutPartidoInput>
    create: XOR<entradasCreateWithoutPartidoInput, entradasUncheckedCreateWithoutPartidoInput>
  }

  export type entradasUpdateWithWhereUniqueWithoutPartidoInput = {
    where: entradasWhereUniqueInput
    data: XOR<entradasUpdateWithoutPartidoInput, entradasUncheckedUpdateWithoutPartidoInput>
  }

  export type entradasUpdateManyWithWhereWithoutPartidoInput = {
    where: entradasScalarWhereInput
    data: XOR<entradasUpdateManyMutationInput, entradasUncheckedUpdateManyWithoutPartidoInput>
  }

  export type entradasScalarWhereInput = {
    AND?: entradasScalarWhereInput | entradasScalarWhereInput[]
    OR?: entradasScalarWhereInput[]
    NOT?: entradasScalarWhereInput | entradasScalarWhereInput[]
    id?: IntFilter<"entradas"> | number
    id_partido?: IntFilter<"entradas"> | number
    id_socio?: IntFilter<"entradas"> | number
    valor?: FloatFilter<"entradas"> | number
    metodo_pago?: EnumMetodoPagoFilter<"entradas"> | $Enums.MetodoPago
  }

  export type partidosCreateWithoutEntradasInput = {
    fecha: Date | string
    rival: string
    resultado?: string | null
  }

  export type partidosUncheckedCreateWithoutEntradasInput = {
    id?: number
    fecha: Date | string
    rival: string
    resultado?: string | null
  }

  export type partidosCreateOrConnectWithoutEntradasInput = {
    where: partidosWhereUniqueInput
    create: XOR<partidosCreateWithoutEntradasInput, partidosUncheckedCreateWithoutEntradasInput>
  }

  export type sociosCreateWithoutEntradasInput = {
    nombre: string
    fecha_nac: Date | string
    email: string
    password: string
    metodo_pago: string
    activo?: boolean
    creado_en?: Date | string
  }

  export type sociosUncheckedCreateWithoutEntradasInput = {
    id?: number
    nombre: string
    fecha_nac: Date | string
    email: string
    password: string
    metodo_pago: string
    activo?: boolean
    creado_en?: Date | string
  }

  export type sociosCreateOrConnectWithoutEntradasInput = {
    where: sociosWhereUniqueInput
    create: XOR<sociosCreateWithoutEntradasInput, sociosUncheckedCreateWithoutEntradasInput>
  }

  export type partidosUpsertWithoutEntradasInput = {
    update: XOR<partidosUpdateWithoutEntradasInput, partidosUncheckedUpdateWithoutEntradasInput>
    create: XOR<partidosCreateWithoutEntradasInput, partidosUncheckedCreateWithoutEntradasInput>
    where?: partidosWhereInput
  }

  export type partidosUpdateToOneWithWhereWithoutEntradasInput = {
    where?: partidosWhereInput
    data: XOR<partidosUpdateWithoutEntradasInput, partidosUncheckedUpdateWithoutEntradasInput>
  }

  export type partidosUpdateWithoutEntradasInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    rival?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type partidosUncheckedUpdateWithoutEntradasInput = {
    id?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    rival?: StringFieldUpdateOperationsInput | string
    resultado?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type sociosUpsertWithoutEntradasInput = {
    update: XOR<sociosUpdateWithoutEntradasInput, sociosUncheckedUpdateWithoutEntradasInput>
    create: XOR<sociosCreateWithoutEntradasInput, sociosUncheckedCreateWithoutEntradasInput>
    where?: sociosWhereInput
  }

  export type sociosUpdateToOneWithWhereWithoutEntradasInput = {
    where?: sociosWhereInput
    data: XOR<sociosUpdateWithoutEntradasInput, sociosUncheckedUpdateWithoutEntradasInput>
  }

  export type sociosUpdateWithoutEntradasInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nac?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    metodo_pago?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type sociosUncheckedUpdateWithoutEntradasInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fecha_nac?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    metodo_pago?: StringFieldUpdateOperationsInput | string
    activo?: BoolFieldUpdateOperationsInput | boolean
    creado_en?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type entradasCreateWithoutSocioInput = {
    valor: number
    metodo_pago: $Enums.MetodoPago
    partido: partidosCreateNestedOneWithoutEntradasInput
  }

  export type entradasUncheckedCreateWithoutSocioInput = {
    id?: number
    id_partido: number
    valor: number
    metodo_pago: $Enums.MetodoPago
  }

  export type entradasCreateOrConnectWithoutSocioInput = {
    where: entradasWhereUniqueInput
    create: XOR<entradasCreateWithoutSocioInput, entradasUncheckedCreateWithoutSocioInput>
  }

  export type entradasCreateManySocioInputEnvelope = {
    data: entradasCreateManySocioInput | entradasCreateManySocioInput[]
    skipDuplicates?: boolean
  }

  export type entradasUpsertWithWhereUniqueWithoutSocioInput = {
    where: entradasWhereUniqueInput
    update: XOR<entradasUpdateWithoutSocioInput, entradasUncheckedUpdateWithoutSocioInput>
    create: XOR<entradasCreateWithoutSocioInput, entradasUncheckedCreateWithoutSocioInput>
  }

  export type entradasUpdateWithWhereUniqueWithoutSocioInput = {
    where: entradasWhereUniqueInput
    data: XOR<entradasUpdateWithoutSocioInput, entradasUncheckedUpdateWithoutSocioInput>
  }

  export type entradasUpdateManyWithWhereWithoutSocioInput = {
    where: entradasScalarWhereInput
    data: XOR<entradasUpdateManyMutationInput, entradasUncheckedUpdateManyWithoutSocioInput>
  }

  export type entradasCreateManyPartidoInput = {
    id?: number
    id_socio: number
    valor: number
    metodo_pago: $Enums.MetodoPago
  }

  export type entradasUpdateWithoutPartidoInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    socio?: sociosUpdateOneRequiredWithoutEntradasNestedInput
  }

  export type entradasUncheckedUpdateWithoutPartidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_socio?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }

  export type entradasUncheckedUpdateManyWithoutPartidoInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_socio?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }

  export type entradasCreateManySocioInput = {
    id?: number
    id_partido: number
    valor: number
    metodo_pago: $Enums.MetodoPago
  }

  export type entradasUpdateWithoutSocioInput = {
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
    partido?: partidosUpdateOneRequiredWithoutEntradasNestedInput
  }

  export type entradasUncheckedUpdateWithoutSocioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_partido?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }

  export type entradasUncheckedUpdateManyWithoutSocioInput = {
    id?: IntFieldUpdateOperationsInput | number
    id_partido?: IntFieldUpdateOperationsInput | number
    valor?: FloatFieldUpdateOperationsInput | number
    metodo_pago?: EnumMetodoPagoFieldUpdateOperationsInput | $Enums.MetodoPago
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}